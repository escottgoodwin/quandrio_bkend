# source: https://quandria-86dfa876be.herokuapp.com/quandria/dev
# timestamp: Thu Nov 22 2018 11:39:17 GMT-0800 (Pacific Standard Time)

type AggregateAnswer {
  count: Int!
}

type AggregateChallenge {
  count: Int!
}

type AggregateCourse {
  count: Int!
}

type AggregateInstitution {
  count: Int!
}

type AggregatePanel {
  count: Int!
}

type AggregateQuestion {
  count: Int!
}

type AggregateQuestionChoice {
  count: Int!
}

type AggregateSequence {
  count: Int!
}

type AggregateTest {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Answer implements Node {
  id: ID!
  answer: QuestionChoice!
  answerCorrect: Boolean
  answeredBy: User
  answerTime: DateTime
  updateDate: DateTime
  updatedBy: User
  question: Question!
}

"""A connection to a list of items."""
type AnswerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnswerEdge]!
  aggregate: AggregateAnswer!
}

input AnswerCreateInput {
  answerCorrect: Boolean
  answerTime: DateTime
  updateDate: DateTime
  answer: QuestionChoiceCreateOneWithoutAnswersInput!
  answeredBy: UserCreateOneWithoutAnswersInput
  updatedBy: UserCreateOneWithoutAnswerUpdatesInput
  question: QuestionCreateOneWithoutQuestionanswersInput!
}

input AnswerCreateManyWithoutAnsweredByInput {
  create: [AnswerCreateWithoutAnsweredByInput!]
  connect: [AnswerWhereUniqueInput!]
}

input AnswerCreateManyWithoutAnswerInput {
  create: [AnswerCreateWithoutAnswerInput!]
  connect: [AnswerWhereUniqueInput!]
}

input AnswerCreateManyWithoutQuestionInput {
  create: [AnswerCreateWithoutQuestionInput!]
  connect: [AnswerWhereUniqueInput!]
}

input AnswerCreateManyWithoutUpdatedByInput {
  create: [AnswerCreateWithoutUpdatedByInput!]
  connect: [AnswerWhereUniqueInput!]
}

input AnswerCreateWithoutAnsweredByInput {
  answerCorrect: Boolean
  answerTime: DateTime
  updateDate: DateTime
  answer: QuestionChoiceCreateOneWithoutAnswersInput!
  updatedBy: UserCreateOneWithoutAnswerUpdatesInput
  question: QuestionCreateOneWithoutQuestionanswersInput!
}

input AnswerCreateWithoutAnswerInput {
  answerCorrect: Boolean
  answerTime: DateTime
  updateDate: DateTime
  answeredBy: UserCreateOneWithoutAnswersInput
  updatedBy: UserCreateOneWithoutAnswerUpdatesInput
  question: QuestionCreateOneWithoutQuestionanswersInput!
}

input AnswerCreateWithoutQuestionInput {
  answerCorrect: Boolean
  answerTime: DateTime
  updateDate: DateTime
  answer: QuestionChoiceCreateOneWithoutAnswersInput!
  answeredBy: UserCreateOneWithoutAnswersInput
  updatedBy: UserCreateOneWithoutAnswerUpdatesInput
}

input AnswerCreateWithoutUpdatedByInput {
  answerCorrect: Boolean
  answerTime: DateTime
  updateDate: DateTime
  answer: QuestionChoiceCreateOneWithoutAnswersInput!
  answeredBy: UserCreateOneWithoutAnswersInput
  question: QuestionCreateOneWithoutQuestionanswersInput!
}

"""An edge in a connection."""
type AnswerEdge {
  """The item at the end of the edge."""
  node: Answer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AnswerOrderByInput {
  id_ASC
  id_DESC
  answerCorrect_ASC
  answerCorrect_DESC
  answerTime_ASC
  answerTime_DESC
  updateDate_ASC
  updateDate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AnswerPreviousValues {
  id: ID!
  answerCorrect: Boolean
  answerTime: DateTime
  updateDate: DateTime
}

type AnswerSubscriptionPayload {
  mutation: MutationType!
  node: Answer
  updatedFields: [String!]
  previousValues: AnswerPreviousValues
}

input AnswerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AnswerWhereInput
}

input AnswerUpdateInput {
  answerCorrect: Boolean
  answerTime: DateTime
  updateDate: DateTime
  answer: QuestionChoiceUpdateOneRequiredWithoutAnswersInput
  answeredBy: UserUpdateOneWithoutAnswersInput
  updatedBy: UserUpdateOneWithoutAnswerUpdatesInput
  question: QuestionUpdateOneRequiredWithoutQuestionanswersInput
}

input AnswerUpdateManyMutationInput {
  answerCorrect: Boolean
  answerTime: DateTime
  updateDate: DateTime
}

input AnswerUpdateManyWithoutAnsweredByInput {
  create: [AnswerCreateWithoutAnsweredByInput!]
  connect: [AnswerWhereUniqueInput!]
  disconnect: [AnswerWhereUniqueInput!]
  delete: [AnswerWhereUniqueInput!]
  update: [AnswerUpdateWithWhereUniqueWithoutAnsweredByInput!]
  upsert: [AnswerUpsertWithWhereUniqueWithoutAnsweredByInput!]
}

input AnswerUpdateManyWithoutAnswerInput {
  create: [AnswerCreateWithoutAnswerInput!]
  connect: [AnswerWhereUniqueInput!]
  disconnect: [AnswerWhereUniqueInput!]
  delete: [AnswerWhereUniqueInput!]
  update: [AnswerUpdateWithWhereUniqueWithoutAnswerInput!]
  upsert: [AnswerUpsertWithWhereUniqueWithoutAnswerInput!]
}

input AnswerUpdateManyWithoutQuestionInput {
  create: [AnswerCreateWithoutQuestionInput!]
  connect: [AnswerWhereUniqueInput!]
  disconnect: [AnswerWhereUniqueInput!]
  delete: [AnswerWhereUniqueInput!]
  update: [AnswerUpdateWithWhereUniqueWithoutQuestionInput!]
  upsert: [AnswerUpsertWithWhereUniqueWithoutQuestionInput!]
}

input AnswerUpdateManyWithoutUpdatedByInput {
  create: [AnswerCreateWithoutUpdatedByInput!]
  connect: [AnswerWhereUniqueInput!]
  disconnect: [AnswerWhereUniqueInput!]
  delete: [AnswerWhereUniqueInput!]
  update: [AnswerUpdateWithWhereUniqueWithoutUpdatedByInput!]
  upsert: [AnswerUpsertWithWhereUniqueWithoutUpdatedByInput!]
}

input AnswerUpdateWithoutAnswerDataInput {
  answerCorrect: Boolean
  answerTime: DateTime
  updateDate: DateTime
  answeredBy: UserUpdateOneWithoutAnswersInput
  updatedBy: UserUpdateOneWithoutAnswerUpdatesInput
  question: QuestionUpdateOneRequiredWithoutQuestionanswersInput
}

input AnswerUpdateWithoutAnsweredByDataInput {
  answerCorrect: Boolean
  answerTime: DateTime
  updateDate: DateTime
  answer: QuestionChoiceUpdateOneRequiredWithoutAnswersInput
  updatedBy: UserUpdateOneWithoutAnswerUpdatesInput
  question: QuestionUpdateOneRequiredWithoutQuestionanswersInput
}

input AnswerUpdateWithoutQuestionDataInput {
  answerCorrect: Boolean
  answerTime: DateTime
  updateDate: DateTime
  answer: QuestionChoiceUpdateOneRequiredWithoutAnswersInput
  answeredBy: UserUpdateOneWithoutAnswersInput
  updatedBy: UserUpdateOneWithoutAnswerUpdatesInput
}

input AnswerUpdateWithoutUpdatedByDataInput {
  answerCorrect: Boolean
  answerTime: DateTime
  updateDate: DateTime
  answer: QuestionChoiceUpdateOneRequiredWithoutAnswersInput
  answeredBy: UserUpdateOneWithoutAnswersInput
  question: QuestionUpdateOneRequiredWithoutQuestionanswersInput
}

input AnswerUpdateWithWhereUniqueWithoutAnsweredByInput {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateWithoutAnsweredByDataInput!
}

input AnswerUpdateWithWhereUniqueWithoutAnswerInput {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateWithoutAnswerDataInput!
}

input AnswerUpdateWithWhereUniqueWithoutQuestionInput {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateWithoutQuestionDataInput!
}

input AnswerUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateWithoutUpdatedByDataInput!
}

input AnswerUpsertWithWhereUniqueWithoutAnsweredByInput {
  where: AnswerWhereUniqueInput!
  update: AnswerUpdateWithoutAnsweredByDataInput!
  create: AnswerCreateWithoutAnsweredByInput!
}

input AnswerUpsertWithWhereUniqueWithoutAnswerInput {
  where: AnswerWhereUniqueInput!
  update: AnswerUpdateWithoutAnswerDataInput!
  create: AnswerCreateWithoutAnswerInput!
}

input AnswerUpsertWithWhereUniqueWithoutQuestionInput {
  where: AnswerWhereUniqueInput!
  update: AnswerUpdateWithoutQuestionDataInput!
  create: AnswerCreateWithoutQuestionInput!
}

input AnswerUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: AnswerWhereUniqueInput!
  update: AnswerUpdateWithoutUpdatedByDataInput!
  create: AnswerCreateWithoutUpdatedByInput!
}

input AnswerWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  answerCorrect: Boolean

  """All values that are not equal to given value."""
  answerCorrect_not: Boolean
  answerTime: DateTime

  """All values that are not equal to given value."""
  answerTime_not: DateTime

  """All values that are contained in given list."""
  answerTime_in: [DateTime!]

  """All values that are not contained in given list."""
  answerTime_not_in: [DateTime!]

  """All values less than the given value."""
  answerTime_lt: DateTime

  """All values less than or equal the given value."""
  answerTime_lte: DateTime

  """All values greater than the given value."""
  answerTime_gt: DateTime

  """All values greater than or equal the given value."""
  answerTime_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  answer: QuestionChoiceWhereInput
  answeredBy: UserWhereInput
  updatedBy: UserWhereInput
  question: QuestionWhereInput
}

input AnswerWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Challenge implements Node {
  id: ID!
  challenge: String
  challenger: User!
  challengeTime: DateTime
  updateDate: DateTime
  updatedBy: User
  question: Question!
}

"""A connection to a list of items."""
type ChallengeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChallengeEdge]!
  aggregate: AggregateChallenge!
}

input ChallengeCreateInput {
  challenge: String
  challengeTime: DateTime
  updateDate: DateTime
  challenger: UserCreateOneWithoutChallengesInput!
  updatedBy: UserCreateOneWithoutChallengeUpdatesInput
  question: QuestionCreateOneWithoutChallengesInput!
}

input ChallengeCreateManyWithoutChallengerInput {
  create: [ChallengeCreateWithoutChallengerInput!]
  connect: [ChallengeWhereUniqueInput!]
}

input ChallengeCreateManyWithoutQuestionInput {
  create: [ChallengeCreateWithoutQuestionInput!]
  connect: [ChallengeWhereUniqueInput!]
}

input ChallengeCreateManyWithoutUpdatedByInput {
  create: [ChallengeCreateWithoutUpdatedByInput!]
  connect: [ChallengeWhereUniqueInput!]
}

input ChallengeCreateWithoutChallengerInput {
  challenge: String
  challengeTime: DateTime
  updateDate: DateTime
  updatedBy: UserCreateOneWithoutChallengeUpdatesInput
  question: QuestionCreateOneWithoutChallengesInput!
}

input ChallengeCreateWithoutQuestionInput {
  challenge: String
  challengeTime: DateTime
  updateDate: DateTime
  challenger: UserCreateOneWithoutChallengesInput!
  updatedBy: UserCreateOneWithoutChallengeUpdatesInput
}

input ChallengeCreateWithoutUpdatedByInput {
  challenge: String
  challengeTime: DateTime
  updateDate: DateTime
  challenger: UserCreateOneWithoutChallengesInput!
  question: QuestionCreateOneWithoutChallengesInput!
}

"""An edge in a connection."""
type ChallengeEdge {
  """The item at the end of the edge."""
  node: Challenge!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChallengeOrderByInput {
  id_ASC
  id_DESC
  challenge_ASC
  challenge_DESC
  challengeTime_ASC
  challengeTime_DESC
  updateDate_ASC
  updateDate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChallengePreviousValues {
  id: ID!
  challenge: String
  challengeTime: DateTime
  updateDate: DateTime
}

type ChallengeSubscriptionPayload {
  mutation: MutationType!
  node: Challenge
  updatedFields: [String!]
  previousValues: ChallengePreviousValues
}

input ChallengeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChallengeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChallengeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChallengeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChallengeWhereInput
}

input ChallengeUpdateInput {
  challenge: String
  challengeTime: DateTime
  updateDate: DateTime
  challenger: UserUpdateOneRequiredWithoutChallengesInput
  updatedBy: UserUpdateOneWithoutChallengeUpdatesInput
  question: QuestionUpdateOneRequiredWithoutChallengesInput
}

input ChallengeUpdateManyMutationInput {
  challenge: String
  challengeTime: DateTime
  updateDate: DateTime
}

input ChallengeUpdateManyWithoutChallengerInput {
  create: [ChallengeCreateWithoutChallengerInput!]
  connect: [ChallengeWhereUniqueInput!]
  disconnect: [ChallengeWhereUniqueInput!]
  delete: [ChallengeWhereUniqueInput!]
  update: [ChallengeUpdateWithWhereUniqueWithoutChallengerInput!]
  upsert: [ChallengeUpsertWithWhereUniqueWithoutChallengerInput!]
}

input ChallengeUpdateManyWithoutQuestionInput {
  create: [ChallengeCreateWithoutQuestionInput!]
  connect: [ChallengeWhereUniqueInput!]
  disconnect: [ChallengeWhereUniqueInput!]
  delete: [ChallengeWhereUniqueInput!]
  update: [ChallengeUpdateWithWhereUniqueWithoutQuestionInput!]
  upsert: [ChallengeUpsertWithWhereUniqueWithoutQuestionInput!]
}

input ChallengeUpdateManyWithoutUpdatedByInput {
  create: [ChallengeCreateWithoutUpdatedByInput!]
  connect: [ChallengeWhereUniqueInput!]
  disconnect: [ChallengeWhereUniqueInput!]
  delete: [ChallengeWhereUniqueInput!]
  update: [ChallengeUpdateWithWhereUniqueWithoutUpdatedByInput!]
  upsert: [ChallengeUpsertWithWhereUniqueWithoutUpdatedByInput!]
}

input ChallengeUpdateWithoutChallengerDataInput {
  challenge: String
  challengeTime: DateTime
  updateDate: DateTime
  updatedBy: UserUpdateOneWithoutChallengeUpdatesInput
  question: QuestionUpdateOneRequiredWithoutChallengesInput
}

input ChallengeUpdateWithoutQuestionDataInput {
  challenge: String
  challengeTime: DateTime
  updateDate: DateTime
  challenger: UserUpdateOneRequiredWithoutChallengesInput
  updatedBy: UserUpdateOneWithoutChallengeUpdatesInput
}

input ChallengeUpdateWithoutUpdatedByDataInput {
  challenge: String
  challengeTime: DateTime
  updateDate: DateTime
  challenger: UserUpdateOneRequiredWithoutChallengesInput
  question: QuestionUpdateOneRequiredWithoutChallengesInput
}

input ChallengeUpdateWithWhereUniqueWithoutChallengerInput {
  where: ChallengeWhereUniqueInput!
  data: ChallengeUpdateWithoutChallengerDataInput!
}

input ChallengeUpdateWithWhereUniqueWithoutQuestionInput {
  where: ChallengeWhereUniqueInput!
  data: ChallengeUpdateWithoutQuestionDataInput!
}

input ChallengeUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: ChallengeWhereUniqueInput!
  data: ChallengeUpdateWithoutUpdatedByDataInput!
}

input ChallengeUpsertWithWhereUniqueWithoutChallengerInput {
  where: ChallengeWhereUniqueInput!
  update: ChallengeUpdateWithoutChallengerDataInput!
  create: ChallengeCreateWithoutChallengerInput!
}

input ChallengeUpsertWithWhereUniqueWithoutQuestionInput {
  where: ChallengeWhereUniqueInput!
  update: ChallengeUpdateWithoutQuestionDataInput!
  create: ChallengeCreateWithoutQuestionInput!
}

input ChallengeUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: ChallengeWhereUniqueInput!
  update: ChallengeUpdateWithoutUpdatedByDataInput!
  create: ChallengeCreateWithoutUpdatedByInput!
}

input ChallengeWhereInput {
  """Logical AND on all given filters."""
  AND: [ChallengeWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChallengeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChallengeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  challenge: String

  """All values that are not equal to given value."""
  challenge_not: String

  """All values that are contained in given list."""
  challenge_in: [String!]

  """All values that are not contained in given list."""
  challenge_not_in: [String!]

  """All values less than the given value."""
  challenge_lt: String

  """All values less than or equal the given value."""
  challenge_lte: String

  """All values greater than the given value."""
  challenge_gt: String

  """All values greater than or equal the given value."""
  challenge_gte: String

  """All values containing the given string."""
  challenge_contains: String

  """All values not containing the given string."""
  challenge_not_contains: String

  """All values starting with the given string."""
  challenge_starts_with: String

  """All values not starting with the given string."""
  challenge_not_starts_with: String

  """All values ending with the given string."""
  challenge_ends_with: String

  """All values not ending with the given string."""
  challenge_not_ends_with: String
  challengeTime: DateTime

  """All values that are not equal to given value."""
  challengeTime_not: DateTime

  """All values that are contained in given list."""
  challengeTime_in: [DateTime!]

  """All values that are not contained in given list."""
  challengeTime_not_in: [DateTime!]

  """All values less than the given value."""
  challengeTime_lt: DateTime

  """All values less than or equal the given value."""
  challengeTime_lte: DateTime

  """All values greater than the given value."""
  challengeTime_gt: DateTime

  """All values greater than or equal the given value."""
  challengeTime_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  challenger: UserWhereInput
  updatedBy: UserWhereInput
  question: QuestionWhereInput
}

input ChallengeWhereUniqueInput {
  id: ID
}

type Course implements Node {
  id: ID!
  addedBy: User!
  addedDate: DateTime
  updateDate: DateTime
  updatedBy: User
  name: String!
  courseNumber: String
  time: String
  institution: Institution!
  teachers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  students(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  tests(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Test!]
}

"""A connection to a list of items."""
type CourseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String!
  courseNumber: String
  time: String
  addedBy: UserCreateOneWithoutCoursesAddedInput!
  updatedBy: UserCreateOneWithoutCourseUpdatesInput
  institution: InstitutionCreateOneWithoutCoursesInput!
  teachers: UserCreateManyWithoutTeacherCoursesInput
  students: UserCreateManyWithoutStudentCoursesInput
  tests: TestCreateManyWithoutCourseInput
}

input CourseCreateManyWithoutAddedByInput {
  create: [CourseCreateWithoutAddedByInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateManyWithoutInstitutionInput {
  create: [CourseCreateWithoutInstitutionInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateManyWithoutStudentsInput {
  create: [CourseCreateWithoutStudentsInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateManyWithoutTeachersInput {
  create: [CourseCreateWithoutTeachersInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateManyWithoutUpdatedByInput {
  create: [CourseCreateWithoutUpdatedByInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateOneWithoutTestsInput {
  create: CourseCreateWithoutTestsInput
  connect: CourseWhereUniqueInput
}

input CourseCreateWithoutAddedByInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String!
  courseNumber: String
  time: String
  updatedBy: UserCreateOneWithoutCourseUpdatesInput
  institution: InstitutionCreateOneWithoutCoursesInput!
  teachers: UserCreateManyWithoutTeacherCoursesInput
  students: UserCreateManyWithoutStudentCoursesInput
  tests: TestCreateManyWithoutCourseInput
}

input CourseCreateWithoutInstitutionInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String!
  courseNumber: String
  time: String
  addedBy: UserCreateOneWithoutCoursesAddedInput!
  updatedBy: UserCreateOneWithoutCourseUpdatesInput
  teachers: UserCreateManyWithoutTeacherCoursesInput
  students: UserCreateManyWithoutStudentCoursesInput
  tests: TestCreateManyWithoutCourseInput
}

input CourseCreateWithoutStudentsInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String!
  courseNumber: String
  time: String
  addedBy: UserCreateOneWithoutCoursesAddedInput!
  updatedBy: UserCreateOneWithoutCourseUpdatesInput
  institution: InstitutionCreateOneWithoutCoursesInput!
  teachers: UserCreateManyWithoutTeacherCoursesInput
  tests: TestCreateManyWithoutCourseInput
}

input CourseCreateWithoutTeachersInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String!
  courseNumber: String
  time: String
  addedBy: UserCreateOneWithoutCoursesAddedInput!
  updatedBy: UserCreateOneWithoutCourseUpdatesInput
  institution: InstitutionCreateOneWithoutCoursesInput!
  students: UserCreateManyWithoutStudentCoursesInput
  tests: TestCreateManyWithoutCourseInput
}

input CourseCreateWithoutTestsInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String!
  courseNumber: String
  time: String
  addedBy: UserCreateOneWithoutCoursesAddedInput!
  updatedBy: UserCreateOneWithoutCourseUpdatesInput
  institution: InstitutionCreateOneWithoutCoursesInput!
  teachers: UserCreateManyWithoutTeacherCoursesInput
  students: UserCreateManyWithoutStudentCoursesInput
}

input CourseCreateWithoutUpdatedByInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String!
  courseNumber: String
  time: String
  addedBy: UserCreateOneWithoutCoursesAddedInput!
  institution: InstitutionCreateOneWithoutCoursesInput!
  teachers: UserCreateManyWithoutTeacherCoursesInput
  students: UserCreateManyWithoutStudentCoursesInput
  tests: TestCreateManyWithoutCourseInput
}

"""An edge in a connection."""
type CourseEdge {
  """The item at the end of the edge."""
  node: Course!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  addedDate_ASC
  addedDate_DESC
  updateDate_ASC
  updateDate_DESC
  name_ASC
  name_DESC
  courseNumber_ASC
  courseNumber_DESC
  time_ASC
  time_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CoursePreviousValues {
  id: ID!
  addedDate: DateTime
  updateDate: DateTime
  name: String!
  courseNumber: String
  time: String
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
}

input CourseUpdateInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String
  courseNumber: String
  time: String
  addedBy: UserUpdateOneRequiredWithoutCoursesAddedInput
  updatedBy: UserUpdateOneWithoutCourseUpdatesInput
  institution: InstitutionUpdateOneRequiredWithoutCoursesInput
  teachers: UserUpdateManyWithoutTeacherCoursesInput
  students: UserUpdateManyWithoutStudentCoursesInput
  tests: TestUpdateManyWithoutCourseInput
}

input CourseUpdateManyMutationInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String
  courseNumber: String
  time: String
}

input CourseUpdateManyWithoutAddedByInput {
  create: [CourseCreateWithoutAddedByInput!]
  connect: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  delete: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutAddedByInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutAddedByInput!]
}

input CourseUpdateManyWithoutInstitutionInput {
  create: [CourseCreateWithoutInstitutionInput!]
  connect: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  delete: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutInstitutionInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutInstitutionInput!]
}

input CourseUpdateManyWithoutStudentsInput {
  create: [CourseCreateWithoutStudentsInput!]
  connect: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  delete: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutStudentsInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutStudentsInput!]
}

input CourseUpdateManyWithoutTeachersInput {
  create: [CourseCreateWithoutTeachersInput!]
  connect: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  delete: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutTeachersInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutTeachersInput!]
}

input CourseUpdateManyWithoutUpdatedByInput {
  create: [CourseCreateWithoutUpdatedByInput!]
  connect: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  delete: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutUpdatedByInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutUpdatedByInput!]
}

input CourseUpdateOneRequiredWithoutTestsInput {
  create: CourseCreateWithoutTestsInput
  connect: CourseWhereUniqueInput
  update: CourseUpdateWithoutTestsDataInput
  upsert: CourseUpsertWithoutTestsInput
}

input CourseUpdateWithoutAddedByDataInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String
  courseNumber: String
  time: String
  updatedBy: UserUpdateOneWithoutCourseUpdatesInput
  institution: InstitutionUpdateOneRequiredWithoutCoursesInput
  teachers: UserUpdateManyWithoutTeacherCoursesInput
  students: UserUpdateManyWithoutStudentCoursesInput
  tests: TestUpdateManyWithoutCourseInput
}

input CourseUpdateWithoutInstitutionDataInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String
  courseNumber: String
  time: String
  addedBy: UserUpdateOneRequiredWithoutCoursesAddedInput
  updatedBy: UserUpdateOneWithoutCourseUpdatesInput
  teachers: UserUpdateManyWithoutTeacherCoursesInput
  students: UserUpdateManyWithoutStudentCoursesInput
  tests: TestUpdateManyWithoutCourseInput
}

input CourseUpdateWithoutStudentsDataInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String
  courseNumber: String
  time: String
  addedBy: UserUpdateOneRequiredWithoutCoursesAddedInput
  updatedBy: UserUpdateOneWithoutCourseUpdatesInput
  institution: InstitutionUpdateOneRequiredWithoutCoursesInput
  teachers: UserUpdateManyWithoutTeacherCoursesInput
  tests: TestUpdateManyWithoutCourseInput
}

input CourseUpdateWithoutTeachersDataInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String
  courseNumber: String
  time: String
  addedBy: UserUpdateOneRequiredWithoutCoursesAddedInput
  updatedBy: UserUpdateOneWithoutCourseUpdatesInput
  institution: InstitutionUpdateOneRequiredWithoutCoursesInput
  students: UserUpdateManyWithoutStudentCoursesInput
  tests: TestUpdateManyWithoutCourseInput
}

input CourseUpdateWithoutTestsDataInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String
  courseNumber: String
  time: String
  addedBy: UserUpdateOneRequiredWithoutCoursesAddedInput
  updatedBy: UserUpdateOneWithoutCourseUpdatesInput
  institution: InstitutionUpdateOneRequiredWithoutCoursesInput
  teachers: UserUpdateManyWithoutTeacherCoursesInput
  students: UserUpdateManyWithoutStudentCoursesInput
}

input CourseUpdateWithoutUpdatedByDataInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String
  courseNumber: String
  time: String
  addedBy: UserUpdateOneRequiredWithoutCoursesAddedInput
  institution: InstitutionUpdateOneRequiredWithoutCoursesInput
  teachers: UserUpdateManyWithoutTeacherCoursesInput
  students: UserUpdateManyWithoutStudentCoursesInput
  tests: TestUpdateManyWithoutCourseInput
}

input CourseUpdateWithWhereUniqueWithoutAddedByInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutAddedByDataInput!
}

input CourseUpdateWithWhereUniqueWithoutInstitutionInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutInstitutionDataInput!
}

input CourseUpdateWithWhereUniqueWithoutStudentsInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutStudentsDataInput!
}

input CourseUpdateWithWhereUniqueWithoutTeachersInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutTeachersDataInput!
}

input CourseUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutUpdatedByDataInput!
}

input CourseUpsertWithoutTestsInput {
  update: CourseUpdateWithoutTestsDataInput!
  create: CourseCreateWithoutTestsInput!
}

input CourseUpsertWithWhereUniqueWithoutAddedByInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutAddedByDataInput!
  create: CourseCreateWithoutAddedByInput!
}

input CourseUpsertWithWhereUniqueWithoutInstitutionInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutInstitutionDataInput!
  create: CourseCreateWithoutInstitutionInput!
}

input CourseUpsertWithWhereUniqueWithoutStudentsInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutStudentsDataInput!
  create: CourseCreateWithoutStudentsInput!
}

input CourseUpsertWithWhereUniqueWithoutTeachersInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutTeachersDataInput!
  create: CourseCreateWithoutTeachersInput!
}

input CourseUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutUpdatedByDataInput!
  create: CourseCreateWithoutUpdatedByInput!
}

input CourseWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  courseNumber: String

  """All values that are not equal to given value."""
  courseNumber_not: String

  """All values that are contained in given list."""
  courseNumber_in: [String!]

  """All values that are not contained in given list."""
  courseNumber_not_in: [String!]

  """All values less than the given value."""
  courseNumber_lt: String

  """All values less than or equal the given value."""
  courseNumber_lte: String

  """All values greater than the given value."""
  courseNumber_gt: String

  """All values greater than or equal the given value."""
  courseNumber_gte: String

  """All values containing the given string."""
  courseNumber_contains: String

  """All values not containing the given string."""
  courseNumber_not_contains: String

  """All values starting with the given string."""
  courseNumber_starts_with: String

  """All values not starting with the given string."""
  courseNumber_not_starts_with: String

  """All values ending with the given string."""
  courseNumber_ends_with: String

  """All values not ending with the given string."""
  courseNumber_not_ends_with: String
  time: String

  """All values that are not equal to given value."""
  time_not: String

  """All values that are contained in given list."""
  time_in: [String!]

  """All values that are not contained in given list."""
  time_not_in: [String!]

  """All values less than the given value."""
  time_lt: String

  """All values less than or equal the given value."""
  time_lte: String

  """All values greater than the given value."""
  time_gt: String

  """All values greater than or equal the given value."""
  time_gte: String

  """All values containing the given string."""
  time_contains: String

  """All values not containing the given string."""
  time_not_contains: String

  """All values starting with the given string."""
  time_starts_with: String

  """All values not starting with the given string."""
  time_not_starts_with: String

  """All values ending with the given string."""
  time_ends_with: String

  """All values not ending with the given string."""
  time_not_ends_with: String
  addedBy: UserWhereInput
  updatedBy: UserWhereInput
  institution: InstitutionWhereInput
  teachers_every: UserWhereInput
  teachers_some: UserWhereInput
  teachers_none: UserWhereInput
  students_every: UserWhereInput
  students_some: UserWhereInput
  students_none: UserWhereInput
  tests_every: TestWhereInput
  tests_some: TestWhereInput
  tests_none: TestWhereInput
}

input CourseWhereUniqueInput {
  id: ID
}

scalar DateTime

type Institution implements Node {
  id: ID!
  name: String!
  type: String
  updateDate: DateTime
  updatedBy: User
  contacts(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  teachers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  students(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
}

"""A connection to a list of items."""
type InstitutionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InstitutionEdge]!
  aggregate: AggregateInstitution!
}

input InstitutionCreateInput {
  name: String!
  type: String
  updateDate: DateTime
  updatedBy: UserCreateOneWithoutInstitutionUpdatesInput
  contacts: UserCreateManyWithoutInstitutionContactInput
  teachers: UserCreateManyWithoutTeacherInstitutionInput
  students: UserCreateManyWithoutStudentInstitutionInput
  courses: CourseCreateManyWithoutInstitutionInput
}

input InstitutionCreateManyWithoutContactsInput {
  create: [InstitutionCreateWithoutContactsInput!]
  connect: [InstitutionWhereUniqueInput!]
}

input InstitutionCreateManyWithoutStudentsInput {
  create: [InstitutionCreateWithoutStudentsInput!]
  connect: [InstitutionWhereUniqueInput!]
}

input InstitutionCreateManyWithoutTeachersInput {
  create: [InstitutionCreateWithoutTeachersInput!]
  connect: [InstitutionWhereUniqueInput!]
}

input InstitutionCreateManyWithoutUpdatedByInput {
  create: [InstitutionCreateWithoutUpdatedByInput!]
  connect: [InstitutionWhereUniqueInput!]
}

input InstitutionCreateOneWithoutCoursesInput {
  create: InstitutionCreateWithoutCoursesInput
  connect: InstitutionWhereUniqueInput
}

input InstitutionCreateWithoutContactsInput {
  name: String!
  type: String
  updateDate: DateTime
  updatedBy: UserCreateOneWithoutInstitutionUpdatesInput
  teachers: UserCreateManyWithoutTeacherInstitutionInput
  students: UserCreateManyWithoutStudentInstitutionInput
  courses: CourseCreateManyWithoutInstitutionInput
}

input InstitutionCreateWithoutCoursesInput {
  name: String!
  type: String
  updateDate: DateTime
  updatedBy: UserCreateOneWithoutInstitutionUpdatesInput
  contacts: UserCreateManyWithoutInstitutionContactInput
  teachers: UserCreateManyWithoutTeacherInstitutionInput
  students: UserCreateManyWithoutStudentInstitutionInput
}

input InstitutionCreateWithoutStudentsInput {
  name: String!
  type: String
  updateDate: DateTime
  updatedBy: UserCreateOneWithoutInstitutionUpdatesInput
  contacts: UserCreateManyWithoutInstitutionContactInput
  teachers: UserCreateManyWithoutTeacherInstitutionInput
  courses: CourseCreateManyWithoutInstitutionInput
}

input InstitutionCreateWithoutTeachersInput {
  name: String!
  type: String
  updateDate: DateTime
  updatedBy: UserCreateOneWithoutInstitutionUpdatesInput
  contacts: UserCreateManyWithoutInstitutionContactInput
  students: UserCreateManyWithoutStudentInstitutionInput
  courses: CourseCreateManyWithoutInstitutionInput
}

input InstitutionCreateWithoutUpdatedByInput {
  name: String!
  type: String
  updateDate: DateTime
  contacts: UserCreateManyWithoutInstitutionContactInput
  teachers: UserCreateManyWithoutTeacherInstitutionInput
  students: UserCreateManyWithoutStudentInstitutionInput
  courses: CourseCreateManyWithoutInstitutionInput
}

"""An edge in a connection."""
type InstitutionEdge {
  """The item at the end of the edge."""
  node: Institution!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InstitutionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  updateDate_ASC
  updateDate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type InstitutionPreviousValues {
  id: ID!
  name: String!
  type: String
  updateDate: DateTime
}

type InstitutionSubscriptionPayload {
  mutation: MutationType!
  node: Institution
  updatedFields: [String!]
  previousValues: InstitutionPreviousValues
}

input InstitutionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InstitutionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InstitutionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InstitutionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InstitutionWhereInput
}

input InstitutionUpdateInput {
  name: String
  type: String
  updateDate: DateTime
  updatedBy: UserUpdateOneWithoutInstitutionUpdatesInput
  contacts: UserUpdateManyWithoutInstitutionContactInput
  teachers: UserUpdateManyWithoutTeacherInstitutionInput
  students: UserUpdateManyWithoutStudentInstitutionInput
  courses: CourseUpdateManyWithoutInstitutionInput
}

input InstitutionUpdateManyMutationInput {
  name: String
  type: String
  updateDate: DateTime
}

input InstitutionUpdateManyWithoutContactsInput {
  create: [InstitutionCreateWithoutContactsInput!]
  connect: [InstitutionWhereUniqueInput!]
  disconnect: [InstitutionWhereUniqueInput!]
  delete: [InstitutionWhereUniqueInput!]
  update: [InstitutionUpdateWithWhereUniqueWithoutContactsInput!]
  upsert: [InstitutionUpsertWithWhereUniqueWithoutContactsInput!]
}

input InstitutionUpdateManyWithoutStudentsInput {
  create: [InstitutionCreateWithoutStudentsInput!]
  connect: [InstitutionWhereUniqueInput!]
  disconnect: [InstitutionWhereUniqueInput!]
  delete: [InstitutionWhereUniqueInput!]
  update: [InstitutionUpdateWithWhereUniqueWithoutStudentsInput!]
  upsert: [InstitutionUpsertWithWhereUniqueWithoutStudentsInput!]
}

input InstitutionUpdateManyWithoutTeachersInput {
  create: [InstitutionCreateWithoutTeachersInput!]
  connect: [InstitutionWhereUniqueInput!]
  disconnect: [InstitutionWhereUniqueInput!]
  delete: [InstitutionWhereUniqueInput!]
  update: [InstitutionUpdateWithWhereUniqueWithoutTeachersInput!]
  upsert: [InstitutionUpsertWithWhereUniqueWithoutTeachersInput!]
}

input InstitutionUpdateManyWithoutUpdatedByInput {
  create: [InstitutionCreateWithoutUpdatedByInput!]
  connect: [InstitutionWhereUniqueInput!]
  disconnect: [InstitutionWhereUniqueInput!]
  delete: [InstitutionWhereUniqueInput!]
  update: [InstitutionUpdateWithWhereUniqueWithoutUpdatedByInput!]
  upsert: [InstitutionUpsertWithWhereUniqueWithoutUpdatedByInput!]
}

input InstitutionUpdateOneRequiredWithoutCoursesInput {
  create: InstitutionCreateWithoutCoursesInput
  connect: InstitutionWhereUniqueInput
  update: InstitutionUpdateWithoutCoursesDataInput
  upsert: InstitutionUpsertWithoutCoursesInput
}

input InstitutionUpdateWithoutContactsDataInput {
  name: String
  type: String
  updateDate: DateTime
  updatedBy: UserUpdateOneWithoutInstitutionUpdatesInput
  teachers: UserUpdateManyWithoutTeacherInstitutionInput
  students: UserUpdateManyWithoutStudentInstitutionInput
  courses: CourseUpdateManyWithoutInstitutionInput
}

input InstitutionUpdateWithoutCoursesDataInput {
  name: String
  type: String
  updateDate: DateTime
  updatedBy: UserUpdateOneWithoutInstitutionUpdatesInput
  contacts: UserUpdateManyWithoutInstitutionContactInput
  teachers: UserUpdateManyWithoutTeacherInstitutionInput
  students: UserUpdateManyWithoutStudentInstitutionInput
}

input InstitutionUpdateWithoutStudentsDataInput {
  name: String
  type: String
  updateDate: DateTime
  updatedBy: UserUpdateOneWithoutInstitutionUpdatesInput
  contacts: UserUpdateManyWithoutInstitutionContactInput
  teachers: UserUpdateManyWithoutTeacherInstitutionInput
  courses: CourseUpdateManyWithoutInstitutionInput
}

input InstitutionUpdateWithoutTeachersDataInput {
  name: String
  type: String
  updateDate: DateTime
  updatedBy: UserUpdateOneWithoutInstitutionUpdatesInput
  contacts: UserUpdateManyWithoutInstitutionContactInput
  students: UserUpdateManyWithoutStudentInstitutionInput
  courses: CourseUpdateManyWithoutInstitutionInput
}

input InstitutionUpdateWithoutUpdatedByDataInput {
  name: String
  type: String
  updateDate: DateTime
  contacts: UserUpdateManyWithoutInstitutionContactInput
  teachers: UserUpdateManyWithoutTeacherInstitutionInput
  students: UserUpdateManyWithoutStudentInstitutionInput
  courses: CourseUpdateManyWithoutInstitutionInput
}

input InstitutionUpdateWithWhereUniqueWithoutContactsInput {
  where: InstitutionWhereUniqueInput!
  data: InstitutionUpdateWithoutContactsDataInput!
}

input InstitutionUpdateWithWhereUniqueWithoutStudentsInput {
  where: InstitutionWhereUniqueInput!
  data: InstitutionUpdateWithoutStudentsDataInput!
}

input InstitutionUpdateWithWhereUniqueWithoutTeachersInput {
  where: InstitutionWhereUniqueInput!
  data: InstitutionUpdateWithoutTeachersDataInput!
}

input InstitutionUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: InstitutionWhereUniqueInput!
  data: InstitutionUpdateWithoutUpdatedByDataInput!
}

input InstitutionUpsertWithoutCoursesInput {
  update: InstitutionUpdateWithoutCoursesDataInput!
  create: InstitutionCreateWithoutCoursesInput!
}

input InstitutionUpsertWithWhereUniqueWithoutContactsInput {
  where: InstitutionWhereUniqueInput!
  update: InstitutionUpdateWithoutContactsDataInput!
  create: InstitutionCreateWithoutContactsInput!
}

input InstitutionUpsertWithWhereUniqueWithoutStudentsInput {
  where: InstitutionWhereUniqueInput!
  update: InstitutionUpdateWithoutStudentsDataInput!
  create: InstitutionCreateWithoutStudentsInput!
}

input InstitutionUpsertWithWhereUniqueWithoutTeachersInput {
  where: InstitutionWhereUniqueInput!
  update: InstitutionUpdateWithoutTeachersDataInput!
  create: InstitutionCreateWithoutTeachersInput!
}

input InstitutionUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: InstitutionWhereUniqueInput!
  update: InstitutionUpdateWithoutUpdatedByDataInput!
  create: InstitutionCreateWithoutUpdatedByInput!
}

input InstitutionWhereInput {
  """Logical AND on all given filters."""
  AND: [InstitutionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InstitutionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InstitutionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  updatedBy: UserWhereInput
  contacts_every: UserWhereInput
  contacts_some: UserWhereInput
  contacts_none: UserWhereInput
  teachers_every: UserWhereInput
  teachers_some: UserWhereInput
  teachers_none: UserWhereInput
  students_every: UserWhereInput
  students_some: UserWhereInput
  students_none: UserWhereInput
  courses_every: CourseWhereInput
  courses_some: CourseWhereInput
  courses_none: CourseWhereInput
}

input InstitutionWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createInstitution(data: InstitutionCreateInput!): Institution!
  createCourse(data: CourseCreateInput!): Course!
  createTest(data: TestCreateInput!): Test!
  createQuestion(data: QuestionCreateInput!): Question!
  createAnswer(data: AnswerCreateInput!): Answer!
  createQuestionChoice(data: QuestionChoiceCreateInput!): QuestionChoice!
  createChallenge(data: ChallengeCreateInput!): Challenge!
  createPanel(data: PanelCreateInput!): Panel!
  createSequence(data: SequenceCreateInput!): Sequence!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateInstitution(data: InstitutionUpdateInput!, where: InstitutionWhereUniqueInput!): Institution
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateTest(data: TestUpdateInput!, where: TestWhereUniqueInput!): Test
  updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  updateAnswer(data: AnswerUpdateInput!, where: AnswerWhereUniqueInput!): Answer
  updateQuestionChoice(data: QuestionChoiceUpdateInput!, where: QuestionChoiceWhereUniqueInput!): QuestionChoice
  updateChallenge(data: ChallengeUpdateInput!, where: ChallengeWhereUniqueInput!): Challenge
  updatePanel(data: PanelUpdateInput!, where: PanelWhereUniqueInput!): Panel
  updateSequence(data: SequenceUpdateInput!, where: SequenceWhereUniqueInput!): Sequence
  deleteUser(where: UserWhereUniqueInput!): User
  deleteInstitution(where: InstitutionWhereUniqueInput!): Institution
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteTest(where: TestWhereUniqueInput!): Test
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteAnswer(where: AnswerWhereUniqueInput!): Answer
  deleteQuestionChoice(where: QuestionChoiceWhereUniqueInput!): QuestionChoice
  deleteChallenge(where: ChallengeWhereUniqueInput!): Challenge
  deletePanel(where: PanelWhereUniqueInput!): Panel
  deleteSequence(where: SequenceWhereUniqueInput!): Sequence
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertInstitution(where: InstitutionWhereUniqueInput!, create: InstitutionCreateInput!, update: InstitutionUpdateInput!): Institution!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  upsertTest(where: TestWhereUniqueInput!, create: TestCreateInput!, update: TestUpdateInput!): Test!
  upsertQuestion(where: QuestionWhereUniqueInput!, create: QuestionCreateInput!, update: QuestionUpdateInput!): Question!
  upsertAnswer(where: AnswerWhereUniqueInput!, create: AnswerCreateInput!, update: AnswerUpdateInput!): Answer!
  upsertQuestionChoice(where: QuestionChoiceWhereUniqueInput!, create: QuestionChoiceCreateInput!, update: QuestionChoiceUpdateInput!): QuestionChoice!
  upsertChallenge(where: ChallengeWhereUniqueInput!, create: ChallengeCreateInput!, update: ChallengeUpdateInput!): Challenge!
  upsertPanel(where: PanelWhereUniqueInput!, create: PanelCreateInput!, update: PanelUpdateInput!): Panel!
  upsertSequence(where: SequenceWhereUniqueInput!, create: SequenceCreateInput!, update: SequenceUpdateInput!): Sequence!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyInstitutions(data: InstitutionUpdateManyMutationInput!, where: InstitutionWhereInput): BatchPayload!
  updateManyCourses(data: CourseUpdateManyMutationInput!, where: CourseWhereInput): BatchPayload!
  updateManyTests(data: TestUpdateManyMutationInput!, where: TestWhereInput): BatchPayload!
  updateManyQuestions(data: QuestionUpdateManyMutationInput!, where: QuestionWhereInput): BatchPayload!
  updateManyAnswers(data: AnswerUpdateManyMutationInput!, where: AnswerWhereInput): BatchPayload!
  updateManyQuestionChoices(data: QuestionChoiceUpdateManyMutationInput!, where: QuestionChoiceWhereInput): BatchPayload!
  updateManyChallenges(data: ChallengeUpdateManyMutationInput!, where: ChallengeWhereInput): BatchPayload!
  updateManyPanels(data: PanelUpdateManyMutationInput!, where: PanelWhereInput): BatchPayload!
  updateManySequences(data: SequenceUpdateManyMutationInput!, where: SequenceWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyInstitutions(where: InstitutionWhereInput): BatchPayload!
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  deleteManyTests(where: TestWhereInput): BatchPayload!
  deleteManyQuestions(where: QuestionWhereInput): BatchPayload!
  deleteManyAnswers(where: AnswerWhereInput): BatchPayload!
  deleteManyQuestionChoices(where: QuestionChoiceWhereInput): BatchPayload!
  deleteManyChallenges(where: ChallengeWhereInput): BatchPayload!
  deleteManyPanels(where: PanelWhereInput): BatchPayload!
  deleteManySequences(where: SequenceWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Panel implements Node {
  id: ID!
  addedBy: User!
  addedDate: DateTime
  test: Test!
  link: String!
  sequences(where: SequenceWhereInput, orderBy: SequenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sequence!]
  usedSequence(where: SequenceWhereInput, orderBy: SequenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sequence!]
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
}

"""A connection to a list of items."""
type PanelConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PanelEdge]!
  aggregate: AggregatePanel!
}

input PanelCreateInput {
  addedDate: DateTime
  link: String!
  addedBy: UserCreateOneWithoutPanelsAddedInput!
  test: TestCreateOneWithoutPanelsInput!
  sequences: SequenceCreateManyInput
  usedSequence: SequenceCreateManyWithoutUsedPanelsInput
  questions: QuestionCreateManyWithoutPanelInput
}

input PanelCreateManyInput {
  create: [PanelCreateInput!]
  connect: [PanelWhereUniqueInput!]
}

input PanelCreateManyWithoutAddedByInput {
  create: [PanelCreateWithoutAddedByInput!]
  connect: [PanelWhereUniqueInput!]
}

input PanelCreateManyWithoutTestInput {
  create: [PanelCreateWithoutTestInput!]
  connect: [PanelWhereUniqueInput!]
}

input PanelCreateManyWithoutUsedSequenceInput {
  create: [PanelCreateWithoutUsedSequenceInput!]
  connect: [PanelWhereUniqueInput!]
}

input PanelCreateOneWithoutQuestionsInput {
  create: PanelCreateWithoutQuestionsInput
  connect: PanelWhereUniqueInput
}

input PanelCreateWithoutAddedByInput {
  addedDate: DateTime
  link: String!
  test: TestCreateOneWithoutPanelsInput!
  sequences: SequenceCreateManyInput
  usedSequence: SequenceCreateManyWithoutUsedPanelsInput
  questions: QuestionCreateManyWithoutPanelInput
}

input PanelCreateWithoutQuestionsInput {
  addedDate: DateTime
  link: String!
  addedBy: UserCreateOneWithoutPanelsAddedInput!
  test: TestCreateOneWithoutPanelsInput!
  sequences: SequenceCreateManyInput
  usedSequence: SequenceCreateManyWithoutUsedPanelsInput
}

input PanelCreateWithoutTestInput {
  addedDate: DateTime
  link: String!
  addedBy: UserCreateOneWithoutPanelsAddedInput!
  sequences: SequenceCreateManyInput
  usedSequence: SequenceCreateManyWithoutUsedPanelsInput
  questions: QuestionCreateManyWithoutPanelInput
}

input PanelCreateWithoutUsedSequenceInput {
  addedDate: DateTime
  link: String!
  addedBy: UserCreateOneWithoutPanelsAddedInput!
  test: TestCreateOneWithoutPanelsInput!
  sequences: SequenceCreateManyInput
  questions: QuestionCreateManyWithoutPanelInput
}

"""An edge in a connection."""
type PanelEdge {
  """The item at the end of the edge."""
  node: Panel!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PanelOrderByInput {
  id_ASC
  id_DESC
  addedDate_ASC
  addedDate_DESC
  link_ASC
  link_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PanelPreviousValues {
  id: ID!
  addedDate: DateTime
  link: String!
}

type PanelSubscriptionPayload {
  mutation: MutationType!
  node: Panel
  updatedFields: [String!]
  previousValues: PanelPreviousValues
}

input PanelSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PanelSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PanelSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PanelSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PanelWhereInput
}

input PanelUpdateDataInput {
  addedDate: DateTime
  link: String
  addedBy: UserUpdateOneRequiredWithoutPanelsAddedInput
  test: TestUpdateOneRequiredWithoutPanelsInput
  sequences: SequenceUpdateManyInput
  usedSequence: SequenceUpdateManyWithoutUsedPanelsInput
  questions: QuestionUpdateManyWithoutPanelInput
}

input PanelUpdateInput {
  addedDate: DateTime
  link: String
  addedBy: UserUpdateOneRequiredWithoutPanelsAddedInput
  test: TestUpdateOneRequiredWithoutPanelsInput
  sequences: SequenceUpdateManyInput
  usedSequence: SequenceUpdateManyWithoutUsedPanelsInput
  questions: QuestionUpdateManyWithoutPanelInput
}

input PanelUpdateManyInput {
  create: [PanelCreateInput!]
  connect: [PanelWhereUniqueInput!]
  disconnect: [PanelWhereUniqueInput!]
  delete: [PanelWhereUniqueInput!]
  update: [PanelUpdateWithWhereUniqueNestedInput!]
  upsert: [PanelUpsertWithWhereUniqueNestedInput!]
}

input PanelUpdateManyMutationInput {
  addedDate: DateTime
  link: String
}

input PanelUpdateManyWithoutAddedByInput {
  create: [PanelCreateWithoutAddedByInput!]
  connect: [PanelWhereUniqueInput!]
  disconnect: [PanelWhereUniqueInput!]
  delete: [PanelWhereUniqueInput!]
  update: [PanelUpdateWithWhereUniqueWithoutAddedByInput!]
  upsert: [PanelUpsertWithWhereUniqueWithoutAddedByInput!]
}

input PanelUpdateManyWithoutTestInput {
  create: [PanelCreateWithoutTestInput!]
  connect: [PanelWhereUniqueInput!]
  disconnect: [PanelWhereUniqueInput!]
  delete: [PanelWhereUniqueInput!]
  update: [PanelUpdateWithWhereUniqueWithoutTestInput!]
  upsert: [PanelUpsertWithWhereUniqueWithoutTestInput!]
}

input PanelUpdateManyWithoutUsedSequenceInput {
  create: [PanelCreateWithoutUsedSequenceInput!]
  connect: [PanelWhereUniqueInput!]
  disconnect: [PanelWhereUniqueInput!]
  delete: [PanelWhereUniqueInput!]
  update: [PanelUpdateWithWhereUniqueWithoutUsedSequenceInput!]
  upsert: [PanelUpsertWithWhereUniqueWithoutUsedSequenceInput!]
}

input PanelUpdateOneWithoutQuestionsInput {
  create: PanelCreateWithoutQuestionsInput
  connect: PanelWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PanelUpdateWithoutQuestionsDataInput
  upsert: PanelUpsertWithoutQuestionsInput
}

input PanelUpdateWithoutAddedByDataInput {
  addedDate: DateTime
  link: String
  test: TestUpdateOneRequiredWithoutPanelsInput
  sequences: SequenceUpdateManyInput
  usedSequence: SequenceUpdateManyWithoutUsedPanelsInput
  questions: QuestionUpdateManyWithoutPanelInput
}

input PanelUpdateWithoutQuestionsDataInput {
  addedDate: DateTime
  link: String
  addedBy: UserUpdateOneRequiredWithoutPanelsAddedInput
  test: TestUpdateOneRequiredWithoutPanelsInput
  sequences: SequenceUpdateManyInput
  usedSequence: SequenceUpdateManyWithoutUsedPanelsInput
}

input PanelUpdateWithoutTestDataInput {
  addedDate: DateTime
  link: String
  addedBy: UserUpdateOneRequiredWithoutPanelsAddedInput
  sequences: SequenceUpdateManyInput
  usedSequence: SequenceUpdateManyWithoutUsedPanelsInput
  questions: QuestionUpdateManyWithoutPanelInput
}

input PanelUpdateWithoutUsedSequenceDataInput {
  addedDate: DateTime
  link: String
  addedBy: UserUpdateOneRequiredWithoutPanelsAddedInput
  test: TestUpdateOneRequiredWithoutPanelsInput
  sequences: SequenceUpdateManyInput
  questions: QuestionUpdateManyWithoutPanelInput
}

input PanelUpdateWithWhereUniqueNestedInput {
  where: PanelWhereUniqueInput!
  data: PanelUpdateDataInput!
}

input PanelUpdateWithWhereUniqueWithoutAddedByInput {
  where: PanelWhereUniqueInput!
  data: PanelUpdateWithoutAddedByDataInput!
}

input PanelUpdateWithWhereUniqueWithoutTestInput {
  where: PanelWhereUniqueInput!
  data: PanelUpdateWithoutTestDataInput!
}

input PanelUpdateWithWhereUniqueWithoutUsedSequenceInput {
  where: PanelWhereUniqueInput!
  data: PanelUpdateWithoutUsedSequenceDataInput!
}

input PanelUpsertWithoutQuestionsInput {
  update: PanelUpdateWithoutQuestionsDataInput!
  create: PanelCreateWithoutQuestionsInput!
}

input PanelUpsertWithWhereUniqueNestedInput {
  where: PanelWhereUniqueInput!
  update: PanelUpdateDataInput!
  create: PanelCreateInput!
}

input PanelUpsertWithWhereUniqueWithoutAddedByInput {
  where: PanelWhereUniqueInput!
  update: PanelUpdateWithoutAddedByDataInput!
  create: PanelCreateWithoutAddedByInput!
}

input PanelUpsertWithWhereUniqueWithoutTestInput {
  where: PanelWhereUniqueInput!
  update: PanelUpdateWithoutTestDataInput!
  create: PanelCreateWithoutTestInput!
}

input PanelUpsertWithWhereUniqueWithoutUsedSequenceInput {
  where: PanelWhereUniqueInput!
  update: PanelUpdateWithoutUsedSequenceDataInput!
  create: PanelCreateWithoutUsedSequenceInput!
}

input PanelWhereInput {
  """Logical AND on all given filters."""
  AND: [PanelWhereInput!]

  """Logical OR on all given filters."""
  OR: [PanelWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PanelWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
  link: String

  """All values that are not equal to given value."""
  link_not: String

  """All values that are contained in given list."""
  link_in: [String!]

  """All values that are not contained in given list."""
  link_not_in: [String!]

  """All values less than the given value."""
  link_lt: String

  """All values less than or equal the given value."""
  link_lte: String

  """All values greater than the given value."""
  link_gt: String

  """All values greater than or equal the given value."""
  link_gte: String

  """All values containing the given string."""
  link_contains: String

  """All values not containing the given string."""
  link_not_contains: String

  """All values starting with the given string."""
  link_starts_with: String

  """All values not starting with the given string."""
  link_not_starts_with: String

  """All values ending with the given string."""
  link_ends_with: String

  """All values not ending with the given string."""
  link_not_ends_with: String
  addedBy: UserWhereInput
  test: TestWhereInput
  sequences_every: SequenceWhereInput
  sequences_some: SequenceWhereInput
  sequences_none: SequenceWhereInput
  usedSequence_every: SequenceWhereInput
  usedSequence_some: SequenceWhereInput
  usedSequence_none: SequenceWhereInput
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
}

input PanelWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  institutions(where: InstitutionWhereInput, orderBy: InstitutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Institution]!
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  tests(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Test]!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question]!
  answers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer]!
  questionChoices(where: QuestionChoiceWhereInput, orderBy: QuestionChoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionChoice]!
  challenges(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge]!
  panels(where: PanelWhereInput, orderBy: PanelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Panel]!
  sequences(where: SequenceWhereInput, orderBy: SequenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sequence]!
  user(where: UserWhereUniqueInput!): User
  institution(where: InstitutionWhereUniqueInput!): Institution
  course(where: CourseWhereUniqueInput!): Course
  test(where: TestWhereUniqueInput!): Test
  question(where: QuestionWhereUniqueInput!): Question
  answer(where: AnswerWhereUniqueInput!): Answer
  questionChoice(where: QuestionChoiceWhereUniqueInput!): QuestionChoice
  challenge(where: ChallengeWhereUniqueInput!): Challenge
  panel(where: PanelWhereUniqueInput!): Panel
  sequence(where: SequenceWhereUniqueInput!): Sequence
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  institutionsConnection(where: InstitutionWhereInput, orderBy: InstitutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InstitutionConnection!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  testsConnection(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestConnection!
  questionsConnection(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection!
  answersConnection(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnswerConnection!
  questionChoicesConnection(where: QuestionChoiceWhereInput, orderBy: QuestionChoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionChoiceConnection!
  challengesConnection(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChallengeConnection!
  panelsConnection(where: PanelWhereInput, orderBy: PanelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PanelConnection!
  sequencesConnection(where: SequenceWhereInput, orderBy: SequenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SequenceConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Question implements Node {
  id: ID!
  question: String!
  questionBy: User!
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  updatedBy: User
  panel: Panel
  test: Test!
  choices(where: QuestionChoiceWhereInput, orderBy: QuestionChoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionChoice!]
  challenges(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge!]
  questionanswers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer!]
}

type QuestionChoice implements Node {
  id: ID!
  choice: String!
  updateDate: DateTime
  updatedBy: User
  question: Question!
  answers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer!]
  correct: Boolean
}

"""A connection to a list of items."""
type QuestionChoiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionChoiceEdge]!
  aggregate: AggregateQuestionChoice!
}

input QuestionChoiceCreateInput {
  choice: String!
  updateDate: DateTime
  correct: Boolean
  updatedBy: UserCreateOneWithoutQuestionChoiceUpdatesInput
  question: QuestionCreateOneWithoutChoicesInput!
  answers: AnswerCreateManyWithoutAnswerInput
}

input QuestionChoiceCreateManyWithoutQuestionInput {
  create: [QuestionChoiceCreateWithoutQuestionInput!]
  connect: [QuestionChoiceWhereUniqueInput!]
}

input QuestionChoiceCreateManyWithoutUpdatedByInput {
  create: [QuestionChoiceCreateWithoutUpdatedByInput!]
  connect: [QuestionChoiceWhereUniqueInput!]
}

input QuestionChoiceCreateOneWithoutAnswersInput {
  create: QuestionChoiceCreateWithoutAnswersInput
  connect: QuestionChoiceWhereUniqueInput
}

input QuestionChoiceCreateWithoutAnswersInput {
  choice: String!
  updateDate: DateTime
  correct: Boolean
  updatedBy: UserCreateOneWithoutQuestionChoiceUpdatesInput
  question: QuestionCreateOneWithoutChoicesInput!
}

input QuestionChoiceCreateWithoutQuestionInput {
  choice: String!
  updateDate: DateTime
  correct: Boolean
  updatedBy: UserCreateOneWithoutQuestionChoiceUpdatesInput
  answers: AnswerCreateManyWithoutAnswerInput
}

input QuestionChoiceCreateWithoutUpdatedByInput {
  choice: String!
  updateDate: DateTime
  correct: Boolean
  question: QuestionCreateOneWithoutChoicesInput!
  answers: AnswerCreateManyWithoutAnswerInput
}

"""An edge in a connection."""
type QuestionChoiceEdge {
  """The item at the end of the edge."""
  node: QuestionChoice!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuestionChoiceOrderByInput {
  id_ASC
  id_DESC
  choice_ASC
  choice_DESC
  updateDate_ASC
  updateDate_DESC
  correct_ASC
  correct_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionChoicePreviousValues {
  id: ID!
  choice: String!
  updateDate: DateTime
  correct: Boolean
}

type QuestionChoiceSubscriptionPayload {
  mutation: MutationType!
  node: QuestionChoice
  updatedFields: [String!]
  previousValues: QuestionChoicePreviousValues
}

input QuestionChoiceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionChoiceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionChoiceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionChoiceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionChoiceWhereInput
}

input QuestionChoiceUpdateInput {
  choice: String
  updateDate: DateTime
  correct: Boolean
  updatedBy: UserUpdateOneWithoutQuestionChoiceUpdatesInput
  question: QuestionUpdateOneRequiredWithoutChoicesInput
  answers: AnswerUpdateManyWithoutAnswerInput
}

input QuestionChoiceUpdateManyMutationInput {
  choice: String
  updateDate: DateTime
  correct: Boolean
}

input QuestionChoiceUpdateManyWithoutQuestionInput {
  create: [QuestionChoiceCreateWithoutQuestionInput!]
  connect: [QuestionChoiceWhereUniqueInput!]
  disconnect: [QuestionChoiceWhereUniqueInput!]
  delete: [QuestionChoiceWhereUniqueInput!]
  update: [QuestionChoiceUpdateWithWhereUniqueWithoutQuestionInput!]
  upsert: [QuestionChoiceUpsertWithWhereUniqueWithoutQuestionInput!]
}

input QuestionChoiceUpdateManyWithoutUpdatedByInput {
  create: [QuestionChoiceCreateWithoutUpdatedByInput!]
  connect: [QuestionChoiceWhereUniqueInput!]
  disconnect: [QuestionChoiceWhereUniqueInput!]
  delete: [QuestionChoiceWhereUniqueInput!]
  update: [QuestionChoiceUpdateWithWhereUniqueWithoutUpdatedByInput!]
  upsert: [QuestionChoiceUpsertWithWhereUniqueWithoutUpdatedByInput!]
}

input QuestionChoiceUpdateOneRequiredWithoutAnswersInput {
  create: QuestionChoiceCreateWithoutAnswersInput
  connect: QuestionChoiceWhereUniqueInput
  update: QuestionChoiceUpdateWithoutAnswersDataInput
  upsert: QuestionChoiceUpsertWithoutAnswersInput
}

input QuestionChoiceUpdateWithoutAnswersDataInput {
  choice: String
  updateDate: DateTime
  correct: Boolean
  updatedBy: UserUpdateOneWithoutQuestionChoiceUpdatesInput
  question: QuestionUpdateOneRequiredWithoutChoicesInput
}

input QuestionChoiceUpdateWithoutQuestionDataInput {
  choice: String
  updateDate: DateTime
  correct: Boolean
  updatedBy: UserUpdateOneWithoutQuestionChoiceUpdatesInput
  answers: AnswerUpdateManyWithoutAnswerInput
}

input QuestionChoiceUpdateWithoutUpdatedByDataInput {
  choice: String
  updateDate: DateTime
  correct: Boolean
  question: QuestionUpdateOneRequiredWithoutChoicesInput
  answers: AnswerUpdateManyWithoutAnswerInput
}

input QuestionChoiceUpdateWithWhereUniqueWithoutQuestionInput {
  where: QuestionChoiceWhereUniqueInput!
  data: QuestionChoiceUpdateWithoutQuestionDataInput!
}

input QuestionChoiceUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: QuestionChoiceWhereUniqueInput!
  data: QuestionChoiceUpdateWithoutUpdatedByDataInput!
}

input QuestionChoiceUpsertWithoutAnswersInput {
  update: QuestionChoiceUpdateWithoutAnswersDataInput!
  create: QuestionChoiceCreateWithoutAnswersInput!
}

input QuestionChoiceUpsertWithWhereUniqueWithoutQuestionInput {
  where: QuestionChoiceWhereUniqueInput!
  update: QuestionChoiceUpdateWithoutQuestionDataInput!
  create: QuestionChoiceCreateWithoutQuestionInput!
}

input QuestionChoiceUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: QuestionChoiceWhereUniqueInput!
  update: QuestionChoiceUpdateWithoutUpdatedByDataInput!
  create: QuestionChoiceCreateWithoutUpdatedByInput!
}

input QuestionChoiceWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionChoiceWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionChoiceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionChoiceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  choice: String

  """All values that are not equal to given value."""
  choice_not: String

  """All values that are contained in given list."""
  choice_in: [String!]

  """All values that are not contained in given list."""
  choice_not_in: [String!]

  """All values less than the given value."""
  choice_lt: String

  """All values less than or equal the given value."""
  choice_lte: String

  """All values greater than the given value."""
  choice_gt: String

  """All values greater than or equal the given value."""
  choice_gte: String

  """All values containing the given string."""
  choice_contains: String

  """All values not containing the given string."""
  choice_not_contains: String

  """All values starting with the given string."""
  choice_starts_with: String

  """All values not starting with the given string."""
  choice_not_starts_with: String

  """All values ending with the given string."""
  choice_ends_with: String

  """All values not ending with the given string."""
  choice_not_ends_with: String
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  correct: Boolean

  """All values that are not equal to given value."""
  correct_not: Boolean
  updatedBy: UserWhereInput
  question: QuestionWhereInput
  answers_every: AnswerWhereInput
  answers_some: AnswerWhereInput
  answers_none: AnswerWhereInput
}

input QuestionChoiceWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type QuestionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionEdge]!
  aggregate: AggregateQuestion!
}

input QuestionCreateInput {
  question: String!
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  questionBy: UserCreateOneWithoutQuestionsInput!
  updatedBy: UserCreateOneWithoutQuestionUpdatesInput
  panel: PanelCreateOneWithoutQuestionsInput
  test: TestCreateOneWithoutQuestionsInput!
  choices: QuestionChoiceCreateManyWithoutQuestionInput
  challenges: ChallengeCreateManyWithoutQuestionInput
  questionanswers: AnswerCreateManyWithoutQuestionInput
}

input QuestionCreateManyWithoutPanelInput {
  create: [QuestionCreateWithoutPanelInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutQuestionByInput {
  create: [QuestionCreateWithoutQuestionByInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutTestInput {
  create: [QuestionCreateWithoutTestInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutUpdatedByInput {
  create: [QuestionCreateWithoutUpdatedByInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateOneWithoutChallengesInput {
  create: QuestionCreateWithoutChallengesInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateOneWithoutChoicesInput {
  create: QuestionCreateWithoutChoicesInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateOneWithoutQuestionanswersInput {
  create: QuestionCreateWithoutQuestionanswersInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateWithoutChallengesInput {
  question: String!
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  questionBy: UserCreateOneWithoutQuestionsInput!
  updatedBy: UserCreateOneWithoutQuestionUpdatesInput
  panel: PanelCreateOneWithoutQuestionsInput
  test: TestCreateOneWithoutQuestionsInput!
  choices: QuestionChoiceCreateManyWithoutQuestionInput
  questionanswers: AnswerCreateManyWithoutQuestionInput
}

input QuestionCreateWithoutChoicesInput {
  question: String!
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  questionBy: UserCreateOneWithoutQuestionsInput!
  updatedBy: UserCreateOneWithoutQuestionUpdatesInput
  panel: PanelCreateOneWithoutQuestionsInput
  test: TestCreateOneWithoutQuestionsInput!
  challenges: ChallengeCreateManyWithoutQuestionInput
  questionanswers: AnswerCreateManyWithoutQuestionInput
}

input QuestionCreateWithoutPanelInput {
  question: String!
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  questionBy: UserCreateOneWithoutQuestionsInput!
  updatedBy: UserCreateOneWithoutQuestionUpdatesInput
  test: TestCreateOneWithoutQuestionsInput!
  choices: QuestionChoiceCreateManyWithoutQuestionInput
  challenges: ChallengeCreateManyWithoutQuestionInput
  questionanswers: AnswerCreateManyWithoutQuestionInput
}

input QuestionCreateWithoutQuestionanswersInput {
  question: String!
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  questionBy: UserCreateOneWithoutQuestionsInput!
  updatedBy: UserCreateOneWithoutQuestionUpdatesInput
  panel: PanelCreateOneWithoutQuestionsInput
  test: TestCreateOneWithoutQuestionsInput!
  choices: QuestionChoiceCreateManyWithoutQuestionInput
  challenges: ChallengeCreateManyWithoutQuestionInput
}

input QuestionCreateWithoutQuestionByInput {
  question: String!
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  updatedBy: UserCreateOneWithoutQuestionUpdatesInput
  panel: PanelCreateOneWithoutQuestionsInput
  test: TestCreateOneWithoutQuestionsInput!
  choices: QuestionChoiceCreateManyWithoutQuestionInput
  challenges: ChallengeCreateManyWithoutQuestionInput
  questionanswers: AnswerCreateManyWithoutQuestionInput
}

input QuestionCreateWithoutTestInput {
  question: String!
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  questionBy: UserCreateOneWithoutQuestionsInput!
  updatedBy: UserCreateOneWithoutQuestionUpdatesInput
  panel: PanelCreateOneWithoutQuestionsInput
  choices: QuestionChoiceCreateManyWithoutQuestionInput
  challenges: ChallengeCreateManyWithoutQuestionInput
  questionanswers: AnswerCreateManyWithoutQuestionInput
}

input QuestionCreateWithoutUpdatedByInput {
  question: String!
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  questionBy: UserCreateOneWithoutQuestionsInput!
  panel: PanelCreateOneWithoutQuestionsInput
  test: TestCreateOneWithoutQuestionsInput!
  choices: QuestionChoiceCreateManyWithoutQuestionInput
  challenges: ChallengeCreateManyWithoutQuestionInput
  questionanswers: AnswerCreateManyWithoutQuestionInput
}

"""An edge in a connection."""
type QuestionEdge {
  """The item at the end of the edge."""
  node: Question!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuestionOrderByInput {
  id_ASC
  id_DESC
  question_ASC
  question_DESC
  questionTime_ASC
  questionTime_DESC
  expirationTime_ASC
  expirationTime_DESC
  updateDate_ASC
  updateDate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionPreviousValues {
  id: ID!
  question: String!
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
}

type QuestionSubscriptionPayload {
  mutation: MutationType!
  node: Question
  updatedFields: [String!]
  previousValues: QuestionPreviousValues
}

input QuestionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionWhereInput
}

input QuestionUpdateInput {
  question: String
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  questionBy: UserUpdateOneRequiredWithoutQuestionsInput
  updatedBy: UserUpdateOneWithoutQuestionUpdatesInput
  panel: PanelUpdateOneWithoutQuestionsInput
  test: TestUpdateOneRequiredWithoutQuestionsInput
  choices: QuestionChoiceUpdateManyWithoutQuestionInput
  challenges: ChallengeUpdateManyWithoutQuestionInput
  questionanswers: AnswerUpdateManyWithoutQuestionInput
}

input QuestionUpdateManyMutationInput {
  question: String
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
}

input QuestionUpdateManyWithoutPanelInput {
  create: [QuestionCreateWithoutPanelInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutPanelInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutPanelInput!]
}

input QuestionUpdateManyWithoutQuestionByInput {
  create: [QuestionCreateWithoutQuestionByInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutQuestionByInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutQuestionByInput!]
}

input QuestionUpdateManyWithoutTestInput {
  create: [QuestionCreateWithoutTestInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutTestInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutTestInput!]
}

input QuestionUpdateManyWithoutUpdatedByInput {
  create: [QuestionCreateWithoutUpdatedByInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutUpdatedByInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutUpdatedByInput!]
}

input QuestionUpdateOneRequiredWithoutChallengesInput {
  create: QuestionCreateWithoutChallengesInput
  connect: QuestionWhereUniqueInput
  update: QuestionUpdateWithoutChallengesDataInput
  upsert: QuestionUpsertWithoutChallengesInput
}

input QuestionUpdateOneRequiredWithoutChoicesInput {
  create: QuestionCreateWithoutChoicesInput
  connect: QuestionWhereUniqueInput
  update: QuestionUpdateWithoutChoicesDataInput
  upsert: QuestionUpsertWithoutChoicesInput
}

input QuestionUpdateOneRequiredWithoutQuestionanswersInput {
  create: QuestionCreateWithoutQuestionanswersInput
  connect: QuestionWhereUniqueInput
  update: QuestionUpdateWithoutQuestionanswersDataInput
  upsert: QuestionUpsertWithoutQuestionanswersInput
}

input QuestionUpdateWithoutChallengesDataInput {
  question: String
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  questionBy: UserUpdateOneRequiredWithoutQuestionsInput
  updatedBy: UserUpdateOneWithoutQuestionUpdatesInput
  panel: PanelUpdateOneWithoutQuestionsInput
  test: TestUpdateOneRequiredWithoutQuestionsInput
  choices: QuestionChoiceUpdateManyWithoutQuestionInput
  questionanswers: AnswerUpdateManyWithoutQuestionInput
}

input QuestionUpdateWithoutChoicesDataInput {
  question: String
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  questionBy: UserUpdateOneRequiredWithoutQuestionsInput
  updatedBy: UserUpdateOneWithoutQuestionUpdatesInput
  panel: PanelUpdateOneWithoutQuestionsInput
  test: TestUpdateOneRequiredWithoutQuestionsInput
  challenges: ChallengeUpdateManyWithoutQuestionInput
  questionanswers: AnswerUpdateManyWithoutQuestionInput
}

input QuestionUpdateWithoutPanelDataInput {
  question: String
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  questionBy: UserUpdateOneRequiredWithoutQuestionsInput
  updatedBy: UserUpdateOneWithoutQuestionUpdatesInput
  test: TestUpdateOneRequiredWithoutQuestionsInput
  choices: QuestionChoiceUpdateManyWithoutQuestionInput
  challenges: ChallengeUpdateManyWithoutQuestionInput
  questionanswers: AnswerUpdateManyWithoutQuestionInput
}

input QuestionUpdateWithoutQuestionanswersDataInput {
  question: String
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  questionBy: UserUpdateOneRequiredWithoutQuestionsInput
  updatedBy: UserUpdateOneWithoutQuestionUpdatesInput
  panel: PanelUpdateOneWithoutQuestionsInput
  test: TestUpdateOneRequiredWithoutQuestionsInput
  choices: QuestionChoiceUpdateManyWithoutQuestionInput
  challenges: ChallengeUpdateManyWithoutQuestionInput
}

input QuestionUpdateWithoutQuestionByDataInput {
  question: String
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  updatedBy: UserUpdateOneWithoutQuestionUpdatesInput
  panel: PanelUpdateOneWithoutQuestionsInput
  test: TestUpdateOneRequiredWithoutQuestionsInput
  choices: QuestionChoiceUpdateManyWithoutQuestionInput
  challenges: ChallengeUpdateManyWithoutQuestionInput
  questionanswers: AnswerUpdateManyWithoutQuestionInput
}

input QuestionUpdateWithoutTestDataInput {
  question: String
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  questionBy: UserUpdateOneRequiredWithoutQuestionsInput
  updatedBy: UserUpdateOneWithoutQuestionUpdatesInput
  panel: PanelUpdateOneWithoutQuestionsInput
  choices: QuestionChoiceUpdateManyWithoutQuestionInput
  challenges: ChallengeUpdateManyWithoutQuestionInput
  questionanswers: AnswerUpdateManyWithoutQuestionInput
}

input QuestionUpdateWithoutUpdatedByDataInput {
  question: String
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  questionBy: UserUpdateOneRequiredWithoutQuestionsInput
  panel: PanelUpdateOneWithoutQuestionsInput
  test: TestUpdateOneRequiredWithoutQuestionsInput
  choices: QuestionChoiceUpdateManyWithoutQuestionInput
  challenges: ChallengeUpdateManyWithoutQuestionInput
  questionanswers: AnswerUpdateManyWithoutQuestionInput
}

input QuestionUpdateWithWhereUniqueWithoutPanelInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutPanelDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutQuestionByInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutQuestionByDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutTestInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutTestDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutUpdatedByDataInput!
}

input QuestionUpsertWithoutChallengesInput {
  update: QuestionUpdateWithoutChallengesDataInput!
  create: QuestionCreateWithoutChallengesInput!
}

input QuestionUpsertWithoutChoicesInput {
  update: QuestionUpdateWithoutChoicesDataInput!
  create: QuestionCreateWithoutChoicesInput!
}

input QuestionUpsertWithoutQuestionanswersInput {
  update: QuestionUpdateWithoutQuestionanswersDataInput!
  create: QuestionCreateWithoutQuestionanswersInput!
}

input QuestionUpsertWithWhereUniqueWithoutPanelInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutPanelDataInput!
  create: QuestionCreateWithoutPanelInput!
}

input QuestionUpsertWithWhereUniqueWithoutQuestionByInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutQuestionByDataInput!
  create: QuestionCreateWithoutQuestionByInput!
}

input QuestionUpsertWithWhereUniqueWithoutTestInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutTestDataInput!
  create: QuestionCreateWithoutTestInput!
}

input QuestionUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutUpdatedByDataInput!
  create: QuestionCreateWithoutUpdatedByInput!
}

input QuestionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  question: String

  """All values that are not equal to given value."""
  question_not: String

  """All values that are contained in given list."""
  question_in: [String!]

  """All values that are not contained in given list."""
  question_not_in: [String!]

  """All values less than the given value."""
  question_lt: String

  """All values less than or equal the given value."""
  question_lte: String

  """All values greater than the given value."""
  question_gt: String

  """All values greater than or equal the given value."""
  question_gte: String

  """All values containing the given string."""
  question_contains: String

  """All values not containing the given string."""
  question_not_contains: String

  """All values starting with the given string."""
  question_starts_with: String

  """All values not starting with the given string."""
  question_not_starts_with: String

  """All values ending with the given string."""
  question_ends_with: String

  """All values not ending with the given string."""
  question_not_ends_with: String
  questionTime: DateTime

  """All values that are not equal to given value."""
  questionTime_not: DateTime

  """All values that are contained in given list."""
  questionTime_in: [DateTime!]

  """All values that are not contained in given list."""
  questionTime_not_in: [DateTime!]

  """All values less than the given value."""
  questionTime_lt: DateTime

  """All values less than or equal the given value."""
  questionTime_lte: DateTime

  """All values greater than the given value."""
  questionTime_gt: DateTime

  """All values greater than or equal the given value."""
  questionTime_gte: DateTime
  expirationTime: DateTime

  """All values that are not equal to given value."""
  expirationTime_not: DateTime

  """All values that are contained in given list."""
  expirationTime_in: [DateTime!]

  """All values that are not contained in given list."""
  expirationTime_not_in: [DateTime!]

  """All values less than the given value."""
  expirationTime_lt: DateTime

  """All values less than or equal the given value."""
  expirationTime_lte: DateTime

  """All values greater than the given value."""
  expirationTime_gt: DateTime

  """All values greater than or equal the given value."""
  expirationTime_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  questionBy: UserWhereInput
  updatedBy: UserWhereInput
  panel: PanelWhereInput
  test: TestWhereInput
  choices_every: QuestionChoiceWhereInput
  choices_some: QuestionChoiceWhereInput
  choices_none: QuestionChoiceWhereInput
  challenges_every: ChallengeWhereInput
  challenges_some: ChallengeWhereInput
  challenges_none: ChallengeWhereInput
  questionanswers_every: AnswerWhereInput
  questionanswers_some: AnswerWhereInput
  questionanswers_none: AnswerWhereInput
}

input QuestionWhereUniqueInput {
  id: ID
}

type Sequence implements Node {
  id: ID!
  sequenceAdded: DateTime
  test: Test!
  students(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  usedStudents(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  panels(where: PanelWhereInput, orderBy: PanelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Panel!]
  usedPanels(where: PanelWhereInput, orderBy: PanelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Panel!]
}

"""A connection to a list of items."""
type SequenceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SequenceEdge]!
  aggregate: AggregateSequence!
}

input SequenceCreateInput {
  sequenceAdded: DateTime
  test: TestCreateOneWithoutSequencesInput!
  students: UserCreateManyWithoutTestSequenceInput
  usedStudents: UserCreateManyWithoutUsedTestSequenceInput
  panels: PanelCreateManyInput
  usedPanels: PanelCreateManyWithoutUsedSequenceInput
}

input SequenceCreateManyInput {
  create: [SequenceCreateInput!]
  connect: [SequenceWhereUniqueInput!]
}

input SequenceCreateManyWithoutStudentsInput {
  create: [SequenceCreateWithoutStudentsInput!]
  connect: [SequenceWhereUniqueInput!]
}

input SequenceCreateManyWithoutUsedPanelsInput {
  create: [SequenceCreateWithoutUsedPanelsInput!]
  connect: [SequenceWhereUniqueInput!]
}

input SequenceCreateManyWithoutUsedStudentsInput {
  create: [SequenceCreateWithoutUsedStudentsInput!]
  connect: [SequenceWhereUniqueInput!]
}

input SequenceCreateOneWithoutTestInput {
  create: SequenceCreateWithoutTestInput
  connect: SequenceWhereUniqueInput
}

input SequenceCreateWithoutStudentsInput {
  sequenceAdded: DateTime
  test: TestCreateOneWithoutSequencesInput!
  usedStudents: UserCreateManyWithoutUsedTestSequenceInput
  panels: PanelCreateManyInput
  usedPanels: PanelCreateManyWithoutUsedSequenceInput
}

input SequenceCreateWithoutTestInput {
  sequenceAdded: DateTime
  students: UserCreateManyWithoutTestSequenceInput
  usedStudents: UserCreateManyWithoutUsedTestSequenceInput
  panels: PanelCreateManyInput
  usedPanels: PanelCreateManyWithoutUsedSequenceInput
}

input SequenceCreateWithoutUsedPanelsInput {
  sequenceAdded: DateTime
  test: TestCreateOneWithoutSequencesInput!
  students: UserCreateManyWithoutTestSequenceInput
  usedStudents: UserCreateManyWithoutUsedTestSequenceInput
  panels: PanelCreateManyInput
}

input SequenceCreateWithoutUsedStudentsInput {
  sequenceAdded: DateTime
  test: TestCreateOneWithoutSequencesInput!
  students: UserCreateManyWithoutTestSequenceInput
  panels: PanelCreateManyInput
  usedPanels: PanelCreateManyWithoutUsedSequenceInput
}

"""An edge in a connection."""
type SequenceEdge {
  """The item at the end of the edge."""
  node: Sequence!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SequenceOrderByInput {
  id_ASC
  id_DESC
  sequenceAdded_ASC
  sequenceAdded_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SequencePreviousValues {
  id: ID!
  sequenceAdded: DateTime
}

type SequenceSubscriptionPayload {
  mutation: MutationType!
  node: Sequence
  updatedFields: [String!]
  previousValues: SequencePreviousValues
}

input SequenceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SequenceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SequenceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SequenceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SequenceWhereInput
}

input SequenceUpdateDataInput {
  sequenceAdded: DateTime
  test: TestUpdateOneRequiredWithoutSequencesInput
  students: UserUpdateManyWithoutTestSequenceInput
  usedStudents: UserUpdateManyWithoutUsedTestSequenceInput
  panels: PanelUpdateManyInput
  usedPanels: PanelUpdateManyWithoutUsedSequenceInput
}

input SequenceUpdateInput {
  sequenceAdded: DateTime
  test: TestUpdateOneRequiredWithoutSequencesInput
  students: UserUpdateManyWithoutTestSequenceInput
  usedStudents: UserUpdateManyWithoutUsedTestSequenceInput
  panels: PanelUpdateManyInput
  usedPanels: PanelUpdateManyWithoutUsedSequenceInput
}

input SequenceUpdateManyInput {
  create: [SequenceCreateInput!]
  connect: [SequenceWhereUniqueInput!]
  disconnect: [SequenceWhereUniqueInput!]
  delete: [SequenceWhereUniqueInput!]
  update: [SequenceUpdateWithWhereUniqueNestedInput!]
  upsert: [SequenceUpsertWithWhereUniqueNestedInput!]
}

input SequenceUpdateManyMutationInput {
  sequenceAdded: DateTime
}

input SequenceUpdateManyWithoutStudentsInput {
  create: [SequenceCreateWithoutStudentsInput!]
  connect: [SequenceWhereUniqueInput!]
  disconnect: [SequenceWhereUniqueInput!]
  delete: [SequenceWhereUniqueInput!]
  update: [SequenceUpdateWithWhereUniqueWithoutStudentsInput!]
  upsert: [SequenceUpsertWithWhereUniqueWithoutStudentsInput!]
}

input SequenceUpdateManyWithoutUsedPanelsInput {
  create: [SequenceCreateWithoutUsedPanelsInput!]
  connect: [SequenceWhereUniqueInput!]
  disconnect: [SequenceWhereUniqueInput!]
  delete: [SequenceWhereUniqueInput!]
  update: [SequenceUpdateWithWhereUniqueWithoutUsedPanelsInput!]
  upsert: [SequenceUpsertWithWhereUniqueWithoutUsedPanelsInput!]
}

input SequenceUpdateManyWithoutUsedStudentsInput {
  create: [SequenceCreateWithoutUsedStudentsInput!]
  connect: [SequenceWhereUniqueInput!]
  disconnect: [SequenceWhereUniqueInput!]
  delete: [SequenceWhereUniqueInput!]
  update: [SequenceUpdateWithWhereUniqueWithoutUsedStudentsInput!]
  upsert: [SequenceUpsertWithWhereUniqueWithoutUsedStudentsInput!]
}

input SequenceUpdateOneWithoutTestInput {
  create: SequenceCreateWithoutTestInput
  connect: SequenceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SequenceUpdateWithoutTestDataInput
  upsert: SequenceUpsertWithoutTestInput
}

input SequenceUpdateWithoutStudentsDataInput {
  sequenceAdded: DateTime
  test: TestUpdateOneRequiredWithoutSequencesInput
  usedStudents: UserUpdateManyWithoutUsedTestSequenceInput
  panels: PanelUpdateManyInput
  usedPanels: PanelUpdateManyWithoutUsedSequenceInput
}

input SequenceUpdateWithoutTestDataInput {
  sequenceAdded: DateTime
  students: UserUpdateManyWithoutTestSequenceInput
  usedStudents: UserUpdateManyWithoutUsedTestSequenceInput
  panels: PanelUpdateManyInput
  usedPanels: PanelUpdateManyWithoutUsedSequenceInput
}

input SequenceUpdateWithoutUsedPanelsDataInput {
  sequenceAdded: DateTime
  test: TestUpdateOneRequiredWithoutSequencesInput
  students: UserUpdateManyWithoutTestSequenceInput
  usedStudents: UserUpdateManyWithoutUsedTestSequenceInput
  panels: PanelUpdateManyInput
}

input SequenceUpdateWithoutUsedStudentsDataInput {
  sequenceAdded: DateTime
  test: TestUpdateOneRequiredWithoutSequencesInput
  students: UserUpdateManyWithoutTestSequenceInput
  panels: PanelUpdateManyInput
  usedPanels: PanelUpdateManyWithoutUsedSequenceInput
}

input SequenceUpdateWithWhereUniqueNestedInput {
  where: SequenceWhereUniqueInput!
  data: SequenceUpdateDataInput!
}

input SequenceUpdateWithWhereUniqueWithoutStudentsInput {
  where: SequenceWhereUniqueInput!
  data: SequenceUpdateWithoutStudentsDataInput!
}

input SequenceUpdateWithWhereUniqueWithoutUsedPanelsInput {
  where: SequenceWhereUniqueInput!
  data: SequenceUpdateWithoutUsedPanelsDataInput!
}

input SequenceUpdateWithWhereUniqueWithoutUsedStudentsInput {
  where: SequenceWhereUniqueInput!
  data: SequenceUpdateWithoutUsedStudentsDataInput!
}

input SequenceUpsertWithoutTestInput {
  update: SequenceUpdateWithoutTestDataInput!
  create: SequenceCreateWithoutTestInput!
}

input SequenceUpsertWithWhereUniqueNestedInput {
  where: SequenceWhereUniqueInput!
  update: SequenceUpdateDataInput!
  create: SequenceCreateInput!
}

input SequenceUpsertWithWhereUniqueWithoutStudentsInput {
  where: SequenceWhereUniqueInput!
  update: SequenceUpdateWithoutStudentsDataInput!
  create: SequenceCreateWithoutStudentsInput!
}

input SequenceUpsertWithWhereUniqueWithoutUsedPanelsInput {
  where: SequenceWhereUniqueInput!
  update: SequenceUpdateWithoutUsedPanelsDataInput!
  create: SequenceCreateWithoutUsedPanelsInput!
}

input SequenceUpsertWithWhereUniqueWithoutUsedStudentsInput {
  where: SequenceWhereUniqueInput!
  update: SequenceUpdateWithoutUsedStudentsDataInput!
  create: SequenceCreateWithoutUsedStudentsInput!
}

input SequenceWhereInput {
  """Logical AND on all given filters."""
  AND: [SequenceWhereInput!]

  """Logical OR on all given filters."""
  OR: [SequenceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SequenceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  sequenceAdded: DateTime

  """All values that are not equal to given value."""
  sequenceAdded_not: DateTime

  """All values that are contained in given list."""
  sequenceAdded_in: [DateTime!]

  """All values that are not contained in given list."""
  sequenceAdded_not_in: [DateTime!]

  """All values less than the given value."""
  sequenceAdded_lt: DateTime

  """All values less than or equal the given value."""
  sequenceAdded_lte: DateTime

  """All values greater than the given value."""
  sequenceAdded_gt: DateTime

  """All values greater than or equal the given value."""
  sequenceAdded_gte: DateTime
  test: TestWhereInput
  students_every: UserWhereInput
  students_some: UserWhereInput
  students_none: UserWhereInput
  usedStudents_every: UserWhereInput
  usedStudents_some: UserWhereInput
  usedStudents_none: UserWhereInput
  panels_every: PanelWhereInput
  panels_some: PanelWhereInput
  panels_none: PanelWhereInput
  usedPanels_every: PanelWhereInput
  usedPanels_some: PanelWhereInput
  usedPanels_none: PanelWhereInput
}

input SequenceWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  institution(where: InstitutionSubscriptionWhereInput): InstitutionSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  test(where: TestSubscriptionWhereInput): TestSubscriptionPayload
  question(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
  answer(where: AnswerSubscriptionWhereInput): AnswerSubscriptionPayload
  questionChoice(where: QuestionChoiceSubscriptionWhereInput): QuestionChoiceSubscriptionPayload
  challenge(where: ChallengeSubscriptionWhereInput): ChallengeSubscriptionPayload
  panel(where: PanelSubscriptionWhereInput): PanelSubscriptionPayload
  sequence(where: SequenceSubscriptionWhereInput): SequenceSubscriptionPayload
}

type Test implements Node {
  id: ID!
  addedBy: User!
  addedDate: DateTime
  updateDate: DateTime
  updatedBy: User
  subject: String!
  testNumber: String
  testDate: DateTime
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  course: Course!
  panels(where: PanelWhereInput, orderBy: PanelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Panel!]
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  sequences: Sequence
}

"""A connection to a list of items."""
type TestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TestEdge]!
  aggregate: AggregateTest!
}

input TestCreateInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String!
  testNumber: String
  testDate: DateTime
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  addedBy: UserCreateOneWithoutTestsAddedInput!
  updatedBy: UserCreateOneWithoutTestUpdatesInput
  course: CourseCreateOneWithoutTestsInput!
  panels: PanelCreateManyWithoutTestInput
  questions: QuestionCreateManyWithoutTestInput
  sequences: SequenceCreateOneWithoutTestInput
}

input TestCreateManyWithoutAddedByInput {
  create: [TestCreateWithoutAddedByInput!]
  connect: [TestWhereUniqueInput!]
}

input TestCreateManyWithoutCourseInput {
  create: [TestCreateWithoutCourseInput!]
  connect: [TestWhereUniqueInput!]
}

input TestCreateManyWithoutUpdatedByInput {
  create: [TestCreateWithoutUpdatedByInput!]
  connect: [TestWhereUniqueInput!]
}

input TestCreateOneWithoutPanelsInput {
  create: TestCreateWithoutPanelsInput
  connect: TestWhereUniqueInput
}

input TestCreateOneWithoutQuestionsInput {
  create: TestCreateWithoutQuestionsInput
  connect: TestWhereUniqueInput
}

input TestCreateOneWithoutSequencesInput {
  create: TestCreateWithoutSequencesInput
  connect: TestWhereUniqueInput
}

input TestCreateWithoutAddedByInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String!
  testNumber: String
  testDate: DateTime
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  updatedBy: UserCreateOneWithoutTestUpdatesInput
  course: CourseCreateOneWithoutTestsInput!
  panels: PanelCreateManyWithoutTestInput
  questions: QuestionCreateManyWithoutTestInput
  sequences: SequenceCreateOneWithoutTestInput
}

input TestCreateWithoutCourseInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String!
  testNumber: String
  testDate: DateTime
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  addedBy: UserCreateOneWithoutTestsAddedInput!
  updatedBy: UserCreateOneWithoutTestUpdatesInput
  panels: PanelCreateManyWithoutTestInput
  questions: QuestionCreateManyWithoutTestInput
  sequences: SequenceCreateOneWithoutTestInput
}

input TestCreateWithoutPanelsInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String!
  testNumber: String
  testDate: DateTime
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  addedBy: UserCreateOneWithoutTestsAddedInput!
  updatedBy: UserCreateOneWithoutTestUpdatesInput
  course: CourseCreateOneWithoutTestsInput!
  questions: QuestionCreateManyWithoutTestInput
  sequences: SequenceCreateOneWithoutTestInput
}

input TestCreateWithoutQuestionsInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String!
  testNumber: String
  testDate: DateTime
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  addedBy: UserCreateOneWithoutTestsAddedInput!
  updatedBy: UserCreateOneWithoutTestUpdatesInput
  course: CourseCreateOneWithoutTestsInput!
  panels: PanelCreateManyWithoutTestInput
  sequences: SequenceCreateOneWithoutTestInput
}

input TestCreateWithoutSequencesInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String!
  testNumber: String
  testDate: DateTime
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  addedBy: UserCreateOneWithoutTestsAddedInput!
  updatedBy: UserCreateOneWithoutTestUpdatesInput
  course: CourseCreateOneWithoutTestsInput!
  panels: PanelCreateManyWithoutTestInput
  questions: QuestionCreateManyWithoutTestInput
}

input TestCreateWithoutUpdatedByInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String!
  testNumber: String
  testDate: DateTime
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  addedBy: UserCreateOneWithoutTestsAddedInput!
  course: CourseCreateOneWithoutTestsInput!
  panels: PanelCreateManyWithoutTestInput
  questions: QuestionCreateManyWithoutTestInput
  sequences: SequenceCreateOneWithoutTestInput
}

"""An edge in a connection."""
type TestEdge {
  """The item at the end of the edge."""
  node: Test!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TestOrderByInput {
  id_ASC
  id_DESC
  addedDate_ASC
  addedDate_DESC
  updateDate_ASC
  updateDate_DESC
  subject_ASC
  subject_DESC
  testNumber_ASC
  testNumber_DESC
  testDate_ASC
  testDate_DESC
  published_ASC
  published_DESC
  publishDate_ASC
  publishDate_DESC
  release_ASC
  release_DESC
  releaseDate_ASC
  releaseDate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TestPreviousValues {
  id: ID!
  addedDate: DateTime
  updateDate: DateTime
  subject: String!
  testNumber: String
  testDate: DateTime
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
}

type TestSubscriptionPayload {
  mutation: MutationType!
  node: Test
  updatedFields: [String!]
  previousValues: TestPreviousValues
}

input TestSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TestWhereInput
}

input TestUpdateInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String
  testNumber: String
  testDate: DateTime
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutTestsAddedInput
  updatedBy: UserUpdateOneWithoutTestUpdatesInput
  course: CourseUpdateOneRequiredWithoutTestsInput
  panels: PanelUpdateManyWithoutTestInput
  questions: QuestionUpdateManyWithoutTestInput
  sequences: SequenceUpdateOneWithoutTestInput
}

input TestUpdateManyMutationInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String
  testNumber: String
  testDate: DateTime
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
}

input TestUpdateManyWithoutAddedByInput {
  create: [TestCreateWithoutAddedByInput!]
  connect: [TestWhereUniqueInput!]
  disconnect: [TestWhereUniqueInput!]
  delete: [TestWhereUniqueInput!]
  update: [TestUpdateWithWhereUniqueWithoutAddedByInput!]
  upsert: [TestUpsertWithWhereUniqueWithoutAddedByInput!]
}

input TestUpdateManyWithoutCourseInput {
  create: [TestCreateWithoutCourseInput!]
  connect: [TestWhereUniqueInput!]
  disconnect: [TestWhereUniqueInput!]
  delete: [TestWhereUniqueInput!]
  update: [TestUpdateWithWhereUniqueWithoutCourseInput!]
  upsert: [TestUpsertWithWhereUniqueWithoutCourseInput!]
}

input TestUpdateManyWithoutUpdatedByInput {
  create: [TestCreateWithoutUpdatedByInput!]
  connect: [TestWhereUniqueInput!]
  disconnect: [TestWhereUniqueInput!]
  delete: [TestWhereUniqueInput!]
  update: [TestUpdateWithWhereUniqueWithoutUpdatedByInput!]
  upsert: [TestUpsertWithWhereUniqueWithoutUpdatedByInput!]
}

input TestUpdateOneRequiredWithoutPanelsInput {
  create: TestCreateWithoutPanelsInput
  connect: TestWhereUniqueInput
  update: TestUpdateWithoutPanelsDataInput
  upsert: TestUpsertWithoutPanelsInput
}

input TestUpdateOneRequiredWithoutQuestionsInput {
  create: TestCreateWithoutQuestionsInput
  connect: TestWhereUniqueInput
  update: TestUpdateWithoutQuestionsDataInput
  upsert: TestUpsertWithoutQuestionsInput
}

input TestUpdateOneRequiredWithoutSequencesInput {
  create: TestCreateWithoutSequencesInput
  connect: TestWhereUniqueInput
  update: TestUpdateWithoutSequencesDataInput
  upsert: TestUpsertWithoutSequencesInput
}

input TestUpdateWithoutAddedByDataInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String
  testNumber: String
  testDate: DateTime
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  updatedBy: UserUpdateOneWithoutTestUpdatesInput
  course: CourseUpdateOneRequiredWithoutTestsInput
  panels: PanelUpdateManyWithoutTestInput
  questions: QuestionUpdateManyWithoutTestInput
  sequences: SequenceUpdateOneWithoutTestInput
}

input TestUpdateWithoutCourseDataInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String
  testNumber: String
  testDate: DateTime
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutTestsAddedInput
  updatedBy: UserUpdateOneWithoutTestUpdatesInput
  panels: PanelUpdateManyWithoutTestInput
  questions: QuestionUpdateManyWithoutTestInput
  sequences: SequenceUpdateOneWithoutTestInput
}

input TestUpdateWithoutPanelsDataInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String
  testNumber: String
  testDate: DateTime
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutTestsAddedInput
  updatedBy: UserUpdateOneWithoutTestUpdatesInput
  course: CourseUpdateOneRequiredWithoutTestsInput
  questions: QuestionUpdateManyWithoutTestInput
  sequences: SequenceUpdateOneWithoutTestInput
}

input TestUpdateWithoutQuestionsDataInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String
  testNumber: String
  testDate: DateTime
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutTestsAddedInput
  updatedBy: UserUpdateOneWithoutTestUpdatesInput
  course: CourseUpdateOneRequiredWithoutTestsInput
  panels: PanelUpdateManyWithoutTestInput
  sequences: SequenceUpdateOneWithoutTestInput
}

input TestUpdateWithoutSequencesDataInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String
  testNumber: String
  testDate: DateTime
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutTestsAddedInput
  updatedBy: UserUpdateOneWithoutTestUpdatesInput
  course: CourseUpdateOneRequiredWithoutTestsInput
  panels: PanelUpdateManyWithoutTestInput
  questions: QuestionUpdateManyWithoutTestInput
}

input TestUpdateWithoutUpdatedByDataInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String
  testNumber: String
  testDate: DateTime
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutTestsAddedInput
  course: CourseUpdateOneRequiredWithoutTestsInput
  panels: PanelUpdateManyWithoutTestInput
  questions: QuestionUpdateManyWithoutTestInput
  sequences: SequenceUpdateOneWithoutTestInput
}

input TestUpdateWithWhereUniqueWithoutAddedByInput {
  where: TestWhereUniqueInput!
  data: TestUpdateWithoutAddedByDataInput!
}

input TestUpdateWithWhereUniqueWithoutCourseInput {
  where: TestWhereUniqueInput!
  data: TestUpdateWithoutCourseDataInput!
}

input TestUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: TestWhereUniqueInput!
  data: TestUpdateWithoutUpdatedByDataInput!
}

input TestUpsertWithoutPanelsInput {
  update: TestUpdateWithoutPanelsDataInput!
  create: TestCreateWithoutPanelsInput!
}

input TestUpsertWithoutQuestionsInput {
  update: TestUpdateWithoutQuestionsDataInput!
  create: TestCreateWithoutQuestionsInput!
}

input TestUpsertWithoutSequencesInput {
  update: TestUpdateWithoutSequencesDataInput!
  create: TestCreateWithoutSequencesInput!
}

input TestUpsertWithWhereUniqueWithoutAddedByInput {
  where: TestWhereUniqueInput!
  update: TestUpdateWithoutAddedByDataInput!
  create: TestCreateWithoutAddedByInput!
}

input TestUpsertWithWhereUniqueWithoutCourseInput {
  where: TestWhereUniqueInput!
  update: TestUpdateWithoutCourseDataInput!
  create: TestCreateWithoutCourseInput!
}

input TestUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: TestWhereUniqueInput!
  update: TestUpdateWithoutUpdatedByDataInput!
  create: TestCreateWithoutUpdatedByInput!
}

input TestWhereInput {
  """Logical AND on all given filters."""
  AND: [TestWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  subject: String

  """All values that are not equal to given value."""
  subject_not: String

  """All values that are contained in given list."""
  subject_in: [String!]

  """All values that are not contained in given list."""
  subject_not_in: [String!]

  """All values less than the given value."""
  subject_lt: String

  """All values less than or equal the given value."""
  subject_lte: String

  """All values greater than the given value."""
  subject_gt: String

  """All values greater than or equal the given value."""
  subject_gte: String

  """All values containing the given string."""
  subject_contains: String

  """All values not containing the given string."""
  subject_not_contains: String

  """All values starting with the given string."""
  subject_starts_with: String

  """All values not starting with the given string."""
  subject_not_starts_with: String

  """All values ending with the given string."""
  subject_ends_with: String

  """All values not ending with the given string."""
  subject_not_ends_with: String
  testNumber: String

  """All values that are not equal to given value."""
  testNumber_not: String

  """All values that are contained in given list."""
  testNumber_in: [String!]

  """All values that are not contained in given list."""
  testNumber_not_in: [String!]

  """All values less than the given value."""
  testNumber_lt: String

  """All values less than or equal the given value."""
  testNumber_lte: String

  """All values greater than the given value."""
  testNumber_gt: String

  """All values greater than or equal the given value."""
  testNumber_gte: String

  """All values containing the given string."""
  testNumber_contains: String

  """All values not containing the given string."""
  testNumber_not_contains: String

  """All values starting with the given string."""
  testNumber_starts_with: String

  """All values not starting with the given string."""
  testNumber_not_starts_with: String

  """All values ending with the given string."""
  testNumber_ends_with: String

  """All values not ending with the given string."""
  testNumber_not_ends_with: String
  testDate: DateTime

  """All values that are not equal to given value."""
  testDate_not: DateTime

  """All values that are contained in given list."""
  testDate_in: [DateTime!]

  """All values that are not contained in given list."""
  testDate_not_in: [DateTime!]

  """All values less than the given value."""
  testDate_lt: DateTime

  """All values less than or equal the given value."""
  testDate_lte: DateTime

  """All values greater than the given value."""
  testDate_gt: DateTime

  """All values greater than or equal the given value."""
  testDate_gte: DateTime
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  publishDate: DateTime

  """All values that are not equal to given value."""
  publishDate_not: DateTime

  """All values that are contained in given list."""
  publishDate_in: [DateTime!]

  """All values that are not contained in given list."""
  publishDate_not_in: [DateTime!]

  """All values less than the given value."""
  publishDate_lt: DateTime

  """All values less than or equal the given value."""
  publishDate_lte: DateTime

  """All values greater than the given value."""
  publishDate_gt: DateTime

  """All values greater than or equal the given value."""
  publishDate_gte: DateTime
  release: Boolean

  """All values that are not equal to given value."""
  release_not: Boolean
  releaseDate: DateTime

  """All values that are not equal to given value."""
  releaseDate_not: DateTime

  """All values that are contained in given list."""
  releaseDate_in: [DateTime!]

  """All values that are not contained in given list."""
  releaseDate_not_in: [DateTime!]

  """All values less than the given value."""
  releaseDate_lt: DateTime

  """All values less than or equal the given value."""
  releaseDate_lte: DateTime

  """All values greater than the given value."""
  releaseDate_gt: DateTime

  """All values greater than or equal the given value."""
  releaseDate_gte: DateTime
  addedBy: UserWhereInput
  updatedBy: UserWhereInput
  course: CourseWhereInput
  panels_every: PanelWhereInput
  panels_some: PanelWhereInput
  panels_none: PanelWhereInput
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  sequences: SequenceWhereInput
}

input TestWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  updatedBy: User
  type: UserType
  institutionContact(where: InstitutionWhereInput, orderBy: InstitutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Institution!]
  teacherInstitution(where: InstitutionWhereInput, orderBy: InstitutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Institution!]
  studentInstitution(where: InstitutionWhereInput, orderBy: InstitutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Institution!]
  teacherCourses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  studentCourses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  answers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer!]
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  challenges(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge!]
  testSequence(where: SequenceWhereInput, orderBy: SequenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sequence!]
  usedTestSequence(where: SequenceWhereInput, orderBy: SequenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sequence!]
  coursesAdded(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  testsAdded(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Test!]
  panelsAdded(where: PanelWhereInput, orderBy: PanelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Panel!]
  institutionUpdates(where: InstitutionWhereInput, orderBy: InstitutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Institution!]
  courseUpdates(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  testUpdates(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Test!]
  questionUpdates(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  answerUpdates(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer!]
  questionChoiceUpdates(where: QuestionChoiceWhereInput, orderBy: QuestionChoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionChoice!]
  challengeUpdates(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge!]
  userUpdates(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  questions: QuestionCreateManyWithoutQuestionByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateManyWithoutInstitutionContactInput {
  create: [UserCreateWithoutInstitutionContactInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutStudentCoursesInput {
  create: [UserCreateWithoutStudentCoursesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutStudentInstitutionInput {
  create: [UserCreateWithoutStudentInstitutionInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTeacherCoursesInput {
  create: [UserCreateWithoutTeacherCoursesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTeacherInstitutionInput {
  create: [UserCreateWithoutTeacherInstitutionInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTestSequenceInput {
  create: [UserCreateWithoutTestSequenceInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutUpdatedByInput {
  create: [UserCreateWithoutUpdatedByInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutUsedTestSequenceInput {
  create: [UserCreateWithoutUsedTestSequenceInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutAnswersInput {
  create: UserCreateWithoutAnswersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutAnswerUpdatesInput {
  create: UserCreateWithoutAnswerUpdatesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutChallengesInput {
  create: UserCreateWithoutChallengesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutChallengeUpdatesInput {
  create: UserCreateWithoutChallengeUpdatesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCoursesAddedInput {
  create: UserCreateWithoutCoursesAddedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCourseUpdatesInput {
  create: UserCreateWithoutCourseUpdatesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInstitutionUpdatesInput {
  create: UserCreateWithoutInstitutionUpdatesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPanelsAddedInput {
  create: UserCreateWithoutPanelsAddedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuestionChoiceUpdatesInput {
  create: UserCreateWithoutQuestionChoiceUpdatesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuestionsInput {
  create: UserCreateWithoutQuestionsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuestionUpdatesInput {
  create: UserCreateWithoutQuestionUpdatesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTestsAddedInput {
  create: UserCreateWithoutTestsAddedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTestUpdatesInput {
  create: UserCreateWithoutTestUpdatesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUserUpdatesInput {
  create: UserCreateWithoutUserUpdatesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAnswersInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  questions: QuestionCreateManyWithoutQuestionByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutAnswerUpdatesInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  questions: QuestionCreateManyWithoutQuestionByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutChallengesInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  questions: QuestionCreateManyWithoutQuestionByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutChallengeUpdatesInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  questions: QuestionCreateManyWithoutQuestionByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutCoursesAddedInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  questions: QuestionCreateManyWithoutQuestionByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutCourseUpdatesInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  questions: QuestionCreateManyWithoutQuestionByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutInstitutionContactInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  questions: QuestionCreateManyWithoutQuestionByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutInstitutionUpdatesInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  questions: QuestionCreateManyWithoutQuestionByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutPanelsAddedInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  questions: QuestionCreateManyWithoutQuestionByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutQuestionChoiceUpdatesInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  questions: QuestionCreateManyWithoutQuestionByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutQuestionsInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutQuestionUpdatesInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  questions: QuestionCreateManyWithoutQuestionByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutStudentCoursesInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  questions: QuestionCreateManyWithoutQuestionByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutStudentInstitutionInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  questions: QuestionCreateManyWithoutQuestionByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutTeacherCoursesInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  questions: QuestionCreateManyWithoutQuestionByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutTeacherInstitutionInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  questions: QuestionCreateManyWithoutQuestionByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutTestsAddedInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  questions: QuestionCreateManyWithoutQuestionByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutTestSequenceInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  questions: QuestionCreateManyWithoutQuestionByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutTestUpdatesInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  questions: QuestionCreateManyWithoutQuestionByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutUpdatedByInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  questions: QuestionCreateManyWithoutQuestionByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutUsedTestSequenceInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  questions: QuestionCreateManyWithoutQuestionByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutUserUpdatesInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherInstitution: InstitutionCreateManyWithoutTeachersInput
  studentInstitution: InstitutionCreateManyWithoutStudentsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAnsweredByInput
  questions: QuestionCreateManyWithoutQuestionByInput
  challenges: ChallengeCreateManyWithoutChallengerInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  phone_ASC
  phone_DESC
  lastLogin_ASC
  lastLogin_DESC
  signUpDate_ASC
  signUpDate_DESC
  online_ASC
  online_DESC
  updateDate_ASC
  updateDate_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

enum UserType {
  STUDENT
  TEACHER
  ADMIN
}

input UserUpdateInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
}

input UserUpdateManyWithoutInstitutionContactInput {
  create: [UserCreateWithoutInstitutionContactInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutInstitutionContactInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutInstitutionContactInput!]
}

input UserUpdateManyWithoutStudentCoursesInput {
  create: [UserCreateWithoutStudentCoursesInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutStudentCoursesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutStudentCoursesInput!]
}

input UserUpdateManyWithoutStudentInstitutionInput {
  create: [UserCreateWithoutStudentInstitutionInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutStudentInstitutionInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutStudentInstitutionInput!]
}

input UserUpdateManyWithoutTeacherCoursesInput {
  create: [UserCreateWithoutTeacherCoursesInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTeacherCoursesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTeacherCoursesInput!]
}

input UserUpdateManyWithoutTeacherInstitutionInput {
  create: [UserCreateWithoutTeacherInstitutionInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTeacherInstitutionInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTeacherInstitutionInput!]
}

input UserUpdateManyWithoutTestSequenceInput {
  create: [UserCreateWithoutTestSequenceInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTestSequenceInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTestSequenceInput!]
}

input UserUpdateManyWithoutUpdatedByInput {
  create: [UserCreateWithoutUpdatedByInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutUpdatedByInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutUpdatedByInput!]
}

input UserUpdateManyWithoutUsedTestSequenceInput {
  create: [UserCreateWithoutUsedTestSequenceInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutUsedTestSequenceInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutUsedTestSequenceInput!]
}

input UserUpdateOneRequiredWithoutChallengesInput {
  create: UserCreateWithoutChallengesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutChallengesDataInput
  upsert: UserUpsertWithoutChallengesInput
}

input UserUpdateOneRequiredWithoutCoursesAddedInput {
  create: UserCreateWithoutCoursesAddedInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCoursesAddedDataInput
  upsert: UserUpsertWithoutCoursesAddedInput
}

input UserUpdateOneRequiredWithoutPanelsAddedInput {
  create: UserCreateWithoutPanelsAddedInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPanelsAddedDataInput
  upsert: UserUpsertWithoutPanelsAddedInput
}

input UserUpdateOneRequiredWithoutQuestionsInput {
  create: UserCreateWithoutQuestionsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutQuestionsDataInput
  upsert: UserUpsertWithoutQuestionsInput
}

input UserUpdateOneRequiredWithoutTestsAddedInput {
  create: UserCreateWithoutTestsAddedInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutTestsAddedDataInput
  upsert: UserUpsertWithoutTestsAddedInput
}

input UserUpdateOneWithoutAnswersInput {
  create: UserCreateWithoutAnswersInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutAnswersDataInput
  upsert: UserUpsertWithoutAnswersInput
}

input UserUpdateOneWithoutAnswerUpdatesInput {
  create: UserCreateWithoutAnswerUpdatesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutAnswerUpdatesDataInput
  upsert: UserUpsertWithoutAnswerUpdatesInput
}

input UserUpdateOneWithoutChallengeUpdatesInput {
  create: UserCreateWithoutChallengeUpdatesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutChallengeUpdatesDataInput
  upsert: UserUpsertWithoutChallengeUpdatesInput
}

input UserUpdateOneWithoutCourseUpdatesInput {
  create: UserCreateWithoutCourseUpdatesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCourseUpdatesDataInput
  upsert: UserUpsertWithoutCourseUpdatesInput
}

input UserUpdateOneWithoutInstitutionUpdatesInput {
  create: UserCreateWithoutInstitutionUpdatesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutInstitutionUpdatesDataInput
  upsert: UserUpsertWithoutInstitutionUpdatesInput
}

input UserUpdateOneWithoutQuestionChoiceUpdatesInput {
  create: UserCreateWithoutQuestionChoiceUpdatesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutQuestionChoiceUpdatesDataInput
  upsert: UserUpsertWithoutQuestionChoiceUpdatesInput
}

input UserUpdateOneWithoutQuestionUpdatesInput {
  create: UserCreateWithoutQuestionUpdatesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutQuestionUpdatesDataInput
  upsert: UserUpsertWithoutQuestionUpdatesInput
}

input UserUpdateOneWithoutTestUpdatesInput {
  create: UserCreateWithoutTestUpdatesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutTestUpdatesDataInput
  upsert: UserUpsertWithoutTestUpdatesInput
}

input UserUpdateOneWithoutUserUpdatesInput {
  create: UserCreateWithoutUserUpdatesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutUserUpdatesDataInput
  upsert: UserUpsertWithoutUserUpdatesInput
}

input UserUpdateWithoutAnswersDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutAnswerUpdatesDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutChallengesDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutChallengeUpdatesDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutCoursesAddedDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutCourseUpdatesDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutInstitutionContactDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutInstitutionUpdatesDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutPanelsAddedDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutQuestionChoiceUpdatesDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutQuestionsDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutQuestionUpdatesDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutStudentCoursesDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutStudentInstitutionDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutTeacherCoursesDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutTeacherInstitutionDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutTestsAddedDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutTestSequenceDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutTestUpdatesDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutUpdatedByDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutUsedTestSequenceDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutUserUpdatesDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  updateDate: DateTime
  type: UserType
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherInstitution: InstitutionUpdateManyWithoutTeachersInput
  studentInstitution: InstitutionUpdateManyWithoutStudentsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAnsweredByInput
  questions: QuestionUpdateManyWithoutQuestionByInput
  challenges: ChallengeUpdateManyWithoutChallengerInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithWhereUniqueWithoutInstitutionContactInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutInstitutionContactDataInput!
}

input UserUpdateWithWhereUniqueWithoutStudentCoursesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutStudentCoursesDataInput!
}

input UserUpdateWithWhereUniqueWithoutStudentInstitutionInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutStudentInstitutionDataInput!
}

input UserUpdateWithWhereUniqueWithoutTeacherCoursesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTeacherCoursesDataInput!
}

input UserUpdateWithWhereUniqueWithoutTeacherInstitutionInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTeacherInstitutionDataInput!
}

input UserUpdateWithWhereUniqueWithoutTestSequenceInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTestSequenceDataInput!
}

input UserUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutUpdatedByDataInput!
}

input UserUpdateWithWhereUniqueWithoutUsedTestSequenceInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutUsedTestSequenceDataInput!
}

input UserUpsertWithoutAnswersInput {
  update: UserUpdateWithoutAnswersDataInput!
  create: UserCreateWithoutAnswersInput!
}

input UserUpsertWithoutAnswerUpdatesInput {
  update: UserUpdateWithoutAnswerUpdatesDataInput!
  create: UserCreateWithoutAnswerUpdatesInput!
}

input UserUpsertWithoutChallengesInput {
  update: UserUpdateWithoutChallengesDataInput!
  create: UserCreateWithoutChallengesInput!
}

input UserUpsertWithoutChallengeUpdatesInput {
  update: UserUpdateWithoutChallengeUpdatesDataInput!
  create: UserCreateWithoutChallengeUpdatesInput!
}

input UserUpsertWithoutCoursesAddedInput {
  update: UserUpdateWithoutCoursesAddedDataInput!
  create: UserCreateWithoutCoursesAddedInput!
}

input UserUpsertWithoutCourseUpdatesInput {
  update: UserUpdateWithoutCourseUpdatesDataInput!
  create: UserCreateWithoutCourseUpdatesInput!
}

input UserUpsertWithoutInstitutionUpdatesInput {
  update: UserUpdateWithoutInstitutionUpdatesDataInput!
  create: UserCreateWithoutInstitutionUpdatesInput!
}

input UserUpsertWithoutPanelsAddedInput {
  update: UserUpdateWithoutPanelsAddedDataInput!
  create: UserCreateWithoutPanelsAddedInput!
}

input UserUpsertWithoutQuestionChoiceUpdatesInput {
  update: UserUpdateWithoutQuestionChoiceUpdatesDataInput!
  create: UserCreateWithoutQuestionChoiceUpdatesInput!
}

input UserUpsertWithoutQuestionsInput {
  update: UserUpdateWithoutQuestionsDataInput!
  create: UserCreateWithoutQuestionsInput!
}

input UserUpsertWithoutQuestionUpdatesInput {
  update: UserUpdateWithoutQuestionUpdatesDataInput!
  create: UserCreateWithoutQuestionUpdatesInput!
}

input UserUpsertWithoutTestsAddedInput {
  update: UserUpdateWithoutTestsAddedDataInput!
  create: UserCreateWithoutTestsAddedInput!
}

input UserUpsertWithoutTestUpdatesInput {
  update: UserUpdateWithoutTestUpdatesDataInput!
  create: UserCreateWithoutTestUpdatesInput!
}

input UserUpsertWithoutUserUpdatesInput {
  update: UserUpdateWithoutUserUpdatesDataInput!
  create: UserCreateWithoutUserUpdatesInput!
}

input UserUpsertWithWhereUniqueWithoutInstitutionContactInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutInstitutionContactDataInput!
  create: UserCreateWithoutInstitutionContactInput!
}

input UserUpsertWithWhereUniqueWithoutStudentCoursesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutStudentCoursesDataInput!
  create: UserCreateWithoutStudentCoursesInput!
}

input UserUpsertWithWhereUniqueWithoutStudentInstitutionInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutStudentInstitutionDataInput!
  create: UserCreateWithoutStudentInstitutionInput!
}

input UserUpsertWithWhereUniqueWithoutTeacherCoursesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTeacherCoursesDataInput!
  create: UserCreateWithoutTeacherCoursesInput!
}

input UserUpsertWithWhereUniqueWithoutTeacherInstitutionInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTeacherInstitutionDataInput!
  create: UserCreateWithoutTeacherInstitutionInput!
}

input UserUpsertWithWhereUniqueWithoutTestSequenceInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTestSequenceDataInput!
  create: UserCreateWithoutTestSequenceInput!
}

input UserUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutUpdatedByDataInput!
  create: UserCreateWithoutUpdatedByInput!
}

input UserUpsertWithWhereUniqueWithoutUsedTestSequenceInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutUsedTestSequenceDataInput!
  create: UserCreateWithoutUsedTestSequenceInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  lastLogin: DateTime

  """All values that are not equal to given value."""
  lastLogin_not: DateTime

  """All values that are contained in given list."""
  lastLogin_in: [DateTime!]

  """All values that are not contained in given list."""
  lastLogin_not_in: [DateTime!]

  """All values less than the given value."""
  lastLogin_lt: DateTime

  """All values less than or equal the given value."""
  lastLogin_lte: DateTime

  """All values greater than the given value."""
  lastLogin_gt: DateTime

  """All values greater than or equal the given value."""
  lastLogin_gte: DateTime
  signUpDate: DateTime

  """All values that are not equal to given value."""
  signUpDate_not: DateTime

  """All values that are contained in given list."""
  signUpDate_in: [DateTime!]

  """All values that are not contained in given list."""
  signUpDate_not_in: [DateTime!]

  """All values less than the given value."""
  signUpDate_lt: DateTime

  """All values less than or equal the given value."""
  signUpDate_lte: DateTime

  """All values greater than the given value."""
  signUpDate_gt: DateTime

  """All values greater than or equal the given value."""
  signUpDate_gte: DateTime
  online: Boolean

  """All values that are not equal to given value."""
  online_not: Boolean
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  type: UserType

  """All values that are not equal to given value."""
  type_not: UserType

  """All values that are contained in given list."""
  type_in: [UserType!]

  """All values that are not contained in given list."""
  type_not_in: [UserType!]
  updatedBy: UserWhereInput
  institutionContact_every: InstitutionWhereInput
  institutionContact_some: InstitutionWhereInput
  institutionContact_none: InstitutionWhereInput
  teacherInstitution_every: InstitutionWhereInput
  teacherInstitution_some: InstitutionWhereInput
  teacherInstitution_none: InstitutionWhereInput
  studentInstitution_every: InstitutionWhereInput
  studentInstitution_some: InstitutionWhereInput
  studentInstitution_none: InstitutionWhereInput
  teacherCourses_every: CourseWhereInput
  teacherCourses_some: CourseWhereInput
  teacherCourses_none: CourseWhereInput
  studentCourses_every: CourseWhereInput
  studentCourses_some: CourseWhereInput
  studentCourses_none: CourseWhereInput
  answers_every: AnswerWhereInput
  answers_some: AnswerWhereInput
  answers_none: AnswerWhereInput
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  challenges_every: ChallengeWhereInput
  challenges_some: ChallengeWhereInput
  challenges_none: ChallengeWhereInput
  testSequence_every: SequenceWhereInput
  testSequence_some: SequenceWhereInput
  testSequence_none: SequenceWhereInput
  usedTestSequence_every: SequenceWhereInput
  usedTestSequence_some: SequenceWhereInput
  usedTestSequence_none: SequenceWhereInput
  coursesAdded_every: CourseWhereInput
  coursesAdded_some: CourseWhereInput
  coursesAdded_none: CourseWhereInput
  testsAdded_every: TestWhereInput
  testsAdded_some: TestWhereInput
  testsAdded_none: TestWhereInput
  panelsAdded_every: PanelWhereInput
  panelsAdded_some: PanelWhereInput
  panelsAdded_none: PanelWhereInput
  institutionUpdates_every: InstitutionWhereInput
  institutionUpdates_some: InstitutionWhereInput
  institutionUpdates_none: InstitutionWhereInput
  courseUpdates_every: CourseWhereInput
  courseUpdates_some: CourseWhereInput
  courseUpdates_none: CourseWhereInput
  testUpdates_every: TestWhereInput
  testUpdates_some: TestWhereInput
  testUpdates_none: TestWhereInput
  questionUpdates_every: QuestionWhereInput
  questionUpdates_some: QuestionWhereInput
  questionUpdates_none: QuestionWhereInput
  answerUpdates_every: AnswerWhereInput
  answerUpdates_some: AnswerWhereInput
  answerUpdates_none: AnswerWhereInput
  questionChoiceUpdates_every: QuestionChoiceWhereInput
  questionChoiceUpdates_some: QuestionChoiceWhereInput
  questionChoiceUpdates_none: QuestionChoiceWhereInput
  challengeUpdates_every: ChallengeWhereInput
  challengeUpdates_some: ChallengeWhereInput
  challengeUpdates_none: ChallengeWhereInput
  userUpdates_every: UserWhereInput
  userUpdates_some: UserWhereInput
  userUpdates_none: UserWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
