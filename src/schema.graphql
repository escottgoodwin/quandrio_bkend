# import User,Institution,Course,Test,Question,QuestionChoice,Challenge,Answer,Sequence from "./generated/prisma.graphql"

type Query {

  users(filter: String): [User!]!
  institutions(filter: String): [Institution!]!
  courses(filter: String): [Course!]!
  tests(filter: String): [Test!]!
  panels(filter: String): [Panel!]!
  questions(filter: String): [Question!]!
  questionchoices(filter: String): [QuestionChoice!]!
  challenges(filter: String): [Challenge!]!
  answers(filter: String): [Answer!]!
  sequences(filter: String): [Sequence!]!

  me: User
}

type Mutation {

  signup(email: String!, password: String!, firstName: String!,lastName: String!, type: String): AuthPayload

  login(email: String!, password: String!): AuthPayload

  addInstitution(name: String!, type: String, contactIds: ID, teacherIds: ID, studentIds: ID, courseIds: ID): Institution !

  updateInstitution(id: ID!, name: String, type: String, contactIds: [ID], teacherIds: [ID], studentIds: [ID], courseIds: [ID]): Institution!

  addCourse(name: String!, courseNumber: String, time: String, institutionId: ID!): Course!

  updateCourse(id: ID!, name: String, courseNumber: String, time: String, teacherIds: [ID], studentIds: [ID]): Course!

  addTest(subject: String!, testNumber: String, testDate: DateTime, courseId: ID!): Test!

  addPanel(link: String!, testId: ID!): Panel!

  addQuestion(question: String!, testId: ID!, panelId: ID!): Question!

  addQuestionChoice(choice: String!, correct: Boolean, questionId: ID!): QuestionChoice!

  addChallenge(challenge: String!, questionId: ID!): Challenge!

  addAnswer(questionId: ID!, answerChoiceId: ID!): Answer!

  addSequence(testId: ID!, studentIds: [ID!]!, panelIds: [ID!]!): Sequence!

}

type AuthPayload {
  token: String
  user: User
}
